/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from 'ts-interface-checker';
// tslint:disable:object-literal-key-quotes

export const JSONValue = t.union(
    'string',
    'number',
    'boolean',
    'undefined',
    t.iface([], {
        [t.indexKey]: 'JSONValue',
    }),
    t.array('JSONValue')
);

export const JSONObject = t.name('any');

export const RPCMessage = t.iface([], {
    jsonrpc: t.lit('2.0'),
    method: 'string',
    params: 'JSONObject',
    id: 'number',
});

export const RPCResult = t.iface([], {
    jsonrpc: t.lit('2.0'),
    result: t.iface([], {
        value: 'boolean',
    }),
    id: 'number',
    error: t.union('JSONObject', 'JSONValue'),
});

export const ValidationType = t.union(t.lit('none'), t.lit('normal'));

export const ValidateParams = t.union('any', t.array('any'));

export const Timestamp = t.union('string', 'number', 'Date');

export const LogValue = t.iface([], {
    timestamp: 'Timestamp',
    data: t.union('string', 'number'),
});

export const InitialState = t.union('string', 'number', 'LogValue');

export const LogValues = t.array('LogValue');

export const ValuePermission = t.union(
    t.lit('r'),
    t.lit('w'),
    t.lit('rw'),
    t.lit('wr')
);

export const StateType = t.union(t.lit('Report'), t.lit('Control'));

export const StateStatus = t.union(
    t.lit('Send'),
    t.lit('Pending'),
    t.lit('Failed')
);

export const EventLogLevel = t.union(
    t.lit('important'),
    t.lit('error'),
    t.lit('success'),
    t.lit('warning'),
    t.lit('info'),
    t.lit('debug')
);

export const LogOperation = t.union(
    t.lit('arbitrary'),
    t.lit('array_agg'),
    t.lit('avg'),
    t.lit('mean'),
    t.lit('count'),
    t.lit('geometric_mean'),
    t.lit('max'),
    t.lit('min'),
    t.lit('sqrdiff'),
    t.lit('stddev'),
    t.lit('sum'),
    t.lit('variance'),
    t.lit('harmonic_mean'),
    t.lit('first'),
    t.lit('last'),
    t.lit('count_distinct'),
    t.lit('median'),
    t.lit('percentile'),
    t.lit('lower_quartile'),
    t.lit('upper_quartile'),
    t.lit('mode')
);

export const EventType = t.union(
    t.lit('create'),
    t.lit('update'),
    t.lit('delete'),
    t.lit('direct')
);

export const Mail = t.iface([], {
    body: 'string',
    subject: 'string',
    from: 'string',
});

export const FilterOperatorType = t.union(
    t.lit('='),
    t.lit('!='),
    t.lit('=='),
    t.lit('<'),
    t.lit('<='),
    t.lit('>'),
    t.lit('>='),
    t.lit('~'),
    t.lit('!~')
);

export const FilterValueOperatorType = t.iface([], {
    operator: 'FilterOperatorType',
    value: t.union('string', t.array('string'), 'number', t.array('number')),
});

export const FilterValueType = t.union(
    'string',
    t.array('string'),
    'number',
    t.array('number'),
    'FilterValueOperatorType',
    'undefined'
);

const exportedTypeSuite: t.ITypeSuite = {
    JSONValue,
    JSONObject,
    RPCMessage,
    RPCResult,
    ValidationType,
    ValidateParams,
    Timestamp,
    LogValue,
    InitialState,
    LogValues,
    ValuePermission,
    StateType,
    StateStatus,
    EventLogLevel,
    LogOperation,
    EventType,
    Mail,
    FilterOperatorType,
    FilterValueOperatorType,
    FilterValueType,
};
export default exportedTypeSuite;
