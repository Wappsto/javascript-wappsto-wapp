import 'reflect-metadata';
import * as t from 'ts-interface-checker';
import { createCheckers } from 'ts-interface-checker';
import axios from 'axios';
import { __decorate } from 'tslib';
import { isArray, pick, isEqual, omit } from 'lodash-es';
import { plainToClass, Type } from 'class-transformer';
import parseDuration from 'parse-duration';

/**
 * This module was automatically generated by `ts-interface-builder`
 */

var ValidationType = /*#__PURE__*/t.union( /*#__PURE__*/t.lit('none'), /*#__PURE__*/t.lit('normal'));
var IConfig = /*#__PURE__*/t.iface([], {
  verbose: /*#__PURE__*/t.opt('boolean'),
  debug: /*#__PURE__*/t.opt('boolean'),
  validation: /*#__PURE__*/t.opt('ValidationType'),
  reconnectCount: /*#__PURE__*/t.opt('number'),
  jitterMin: /*#__PURE__*/t.opt('number'),
  jitterMax: /*#__PURE__*/t.opt('number')
});
var IConfigFunc = /*#__PURE__*/t.iface([], {
  config: /*#__PURE__*/t.func('IConfig', /*#__PURE__*/t.param('param', 'IConfig'))
});
var IModel = /*#__PURE__*/t.iface([], {
  id: /*#__PURE__*/t.func('string'),
  getUrl: /*#__PURE__*/t.func('string'),
  removeChild: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('child', 'IModel')),
  setParent: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('parent', 'IModel', true))
});
var IModelFunc = /*#__PURE__*/t.iface([], {
  create: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('parameters', 'any')),
  fetch: /*#__PURE__*/t.func( /*#__PURE__*/t.array('any'), /*#__PURE__*/t.param('endpoint', 'string'), /*#__PURE__*/t.param('options', 'any', true), /*#__PURE__*/t.param('throwError', 'boolean', true)),
  setParent: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('parent', 'IModel', true)),
  parse: /*#__PURE__*/t.func('boolean', /*#__PURE__*/t.param('json', 'any')),
  parseChildren: /*#__PURE__*/t.func('boolean', /*#__PURE__*/t.param('json', 'any')),
  onChange: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('callback', 'StreamCallback')),
  onDelete: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('callback', 'StreamCallback')),
  onCreate: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('callback', 'StreamCallback'))
});
var IConnection = /*#__PURE__*/t.iface([], {
  timestamp: 'string',
  online: 'boolean'
});
var IMeta = /*#__PURE__*/t.iface([], {
  id: /*#__PURE__*/t.opt('string'),
  type: /*#__PURE__*/t.opt('string'),
  version: /*#__PURE__*/t.opt('string'),
  redirect: /*#__PURE__*/t.opt('string'),
  manufacturer: /*#__PURE__*/t.opt('string'),
  iot: /*#__PURE__*/t.opt('boolean'),
  upgradable: /*#__PURE__*/t.opt('boolean'),
  connection: /*#__PURE__*/t.opt('IConnection'),
  created: /*#__PURE__*/t.opt('string'),
  updated: /*#__PURE__*/t.opt('string'),
  revision: /*#__PURE__*/t.opt('number'),
  changed: /*#__PURE__*/t.opt('string'),
  owner: /*#__PURE__*/t.opt('string'),
  size: /*#__PURE__*/t.opt('number'),
  path: /*#__PURE__*/t.opt('string'),
  parent: /*#__PURE__*/t.opt('string'),
  usage_daily: /*#__PURE__*/t.opt('any'),
  product: /*#__PURE__*/t.opt('string'),
  deprecated: /*#__PURE__*/t.opt('boolean'),
  icon: /*#__PURE__*/t.opt('string'),
  trace: /*#__PURE__*/t.opt('string')
});
var INetwork = /*#__PURE__*/t.iface([], {
  name: 'string',
  description: /*#__PURE__*/t.opt('string')
});
var INetworkFunc = /*#__PURE__*/t.iface([], {
  constructor: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('name', 'string', true)),
  createNetwork: /*#__PURE__*/t.func('INetwork', /*#__PURE__*/t.param('parameters', 'INetwork')),
  findDeviceByName: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IDevice'), /*#__PURE__*/t.param('name', 'string')),
  findDeviceByProduct: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IDevice'), /*#__PURE__*/t.param('product', 'string')),
  findValueByName: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IValue'), /*#__PURE__*/t.param('name', 'string')),
  findValueByType: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IValue'), /*#__PURE__*/t.param('type', 'string')),
  createDevice: /*#__PURE__*/t.func('IDevice', /*#__PURE__*/t.param('parameters', 'IDevice')),
  find: /*#__PURE__*/t.func( /*#__PURE__*/t.array('INetwork'), /*#__PURE__*/t.param('options', 'any'), /*#__PURE__*/t.param('quantity', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('all'))), /*#__PURE__*/t.param('usage', 'string')),
  findByName: /*#__PURE__*/t.func( /*#__PURE__*/t.array('INetwork'), /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('quantity', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('all'))), /*#__PURE__*/t.param('usage', 'string')),
  findAllByName: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IDevice'), /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('usage', 'string')),
  findById: /*#__PURE__*/t.func('INetwork', /*#__PURE__*/t.param('id', 'string')),
  fetch: /*#__PURE__*/t.func('IDevice', /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('options', 'any'))
});
var IDevice = /*#__PURE__*/t.iface([], {
  name: 'string',
  product: /*#__PURE__*/t.opt('string'),
  serial: /*#__PURE__*/t.opt('string'),
  description: /*#__PURE__*/t.opt('string'),
  protocol: /*#__PURE__*/t.opt('string'),
  communication: /*#__PURE__*/t.opt('string'),
  version: /*#__PURE__*/t.opt('string'),
  manufacturer: /*#__PURE__*/t.opt('string')
});
var IDeviceFunc = /*#__PURE__*/t.iface([], {
  constructor: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('name', 'string', true)),
  findValueByName: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IValue'), /*#__PURE__*/t.param('name', 'string')),
  findValueByType: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IValue'), /*#__PURE__*/t.param('type', 'string')),
  createValue: /*#__PURE__*/t.func('IValue', /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('permission', 'ValuePermission'), /*#__PURE__*/t.param('valueTemplate', 'IValue'), /*#__PURE__*/t.param('period', 'string', true), /*#__PURE__*/t.param('delta', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('inf')), true)),
  createNumberValue: /*#__PURE__*/t.func('IValueNumber', /*#__PURE__*/t.param('parameters', 'IValueNumber')),
  createStringValue: /*#__PURE__*/t.func('IValueString', /*#__PURE__*/t.param('parameters', 'IValueString')),
  createBlobValue: /*#__PURE__*/t.func('IValueBlob', /*#__PURE__*/t.param('parameters', 'IValueBlob')),
  createXmlValue: /*#__PURE__*/t.func('IValueXml', /*#__PURE__*/t.param('parameters', 'IValueXml')),
  find: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IDevice'), /*#__PURE__*/t.param('options', 'any'), /*#__PURE__*/t.param('quantity', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('all'))), /*#__PURE__*/t.param('usage', 'string')),
  findByName: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IDevice'), /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('quantity', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('all'))), /*#__PURE__*/t.param('usage', 'string')),
  findAllByName: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IDevice'), /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('usage', 'string')),
  findByProduct: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IDevice'), /*#__PURE__*/t.param('product', 'string'), /*#__PURE__*/t.param('quantity', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('all'))), /*#__PURE__*/t.param('usage', 'string')),
  findAllByProduct: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IDevice'), /*#__PURE__*/t.param('product', 'string'), /*#__PURE__*/t.param('usage', 'string')),
  findById: /*#__PURE__*/t.func('IDevice', /*#__PURE__*/t.param('id', 'string'))
});
var IPermissionModelFunc = /*#__PURE__*/t.iface([], {
  request: /*#__PURE__*/t.func( /*#__PURE__*/t.array('any'), /*#__PURE__*/t.param('endpoint', 'string'), /*#__PURE__*/t.param('quantity', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('all'))), /*#__PURE__*/t.param('message', 'string'), /*#__PURE__*/t.param('options', 'any', true))
});
var ValuePermission = /*#__PURE__*/t.union( /*#__PURE__*/t.lit('r'), /*#__PURE__*/t.lit('w'), /*#__PURE__*/t.lit('rw'), /*#__PURE__*/t.lit('wr'));
var IValue = /*#__PURE__*/t.union( /*#__PURE__*/t.intersection('IValueBase', /*#__PURE__*/t.iface([], {
  number: 'IValueNumberBase'
})), /*#__PURE__*/t.intersection('IValueBase', /*#__PURE__*/t.iface([], {
  string: 'IValueStringBlobBase'
})), /*#__PURE__*/t.intersection('IValueBase', /*#__PURE__*/t.iface([], {
  blob: 'IValueStringBlobBase'
})), /*#__PURE__*/t.intersection('IValueBase', /*#__PURE__*/t.iface([], {
  xml: 'IValueXmlBase'
})));
var IValueBase = /*#__PURE__*/t.iface([], {
  name: 'string',
  permission: 'ValuePermission',
  type: 'string',
  description: /*#__PURE__*/t.opt('string'),
  period: /*#__PURE__*/t.opt('string'),
  delta: /*#__PURE__*/t.opt('string')
});
var IValueNumberBase = /*#__PURE__*/t.iface([], {
  min: 'number',
  max: 'number',
  step: 'number',
  unit: 'string',
  si_conversion: /*#__PURE__*/t.opt('string'),
  mapping: /*#__PURE__*/t.opt('any'),
  ordered_mapping: /*#__PURE__*/t.opt('boolean'),
  meaningful_zero: /*#__PURE__*/t.opt('boolean')
});
var IValueStringBlobBase = /*#__PURE__*/t.iface([], {
  max: 'number',
  encoding: /*#__PURE__*/t.opt('string')
});
var IValueXmlBase = /*#__PURE__*/t.iface([], {
  xsd: /*#__PURE__*/t.opt('string'),
  namespace: /*#__PURE__*/t.opt('string')
});
var IValueNumber = /*#__PURE__*/t.iface(['IValueBase', 'IValueNumberBase'], {});
var IValueString = /*#__PURE__*/t.iface(['IValueBase', 'IValueStringBlobBase'], {});
var IValueBlob = /*#__PURE__*/t.iface(['IValueBase', 'IValueStringBlobBase'], {});
var IValueXml = /*#__PURE__*/t.iface(['IValueBase', 'IValueXmlBase'], {});
var IValueFunc = /*#__PURE__*/t.iface([], {
  constructor: /*#__PURE__*/t.func('IState', /*#__PURE__*/t.param('name', 'string', true)),
  createState: /*#__PURE__*/t.func('IState', /*#__PURE__*/t.param('parameters', 'IState')),
  report: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('data', /*#__PURE__*/t.union('string', 'number')), /*#__PURE__*/t.param('timestamp', /*#__PURE__*/t.union('string', 'undefined'))),
  forceReport: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('data', /*#__PURE__*/t.union('string', 'number')), /*#__PURE__*/t.param('timestamp', /*#__PURE__*/t.union('string', 'undefined'))),
  control: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('data', /*#__PURE__*/t.union('string', 'number')), /*#__PURE__*/t.param('timestamp', /*#__PURE__*/t.union('string', 'undefined'))),
  onControl: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('callback', 'ValueStreamCallback')),
  onReport: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('callback', 'ValueStreamCallback')),
  onRefresh: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('callback', 'RefreshStreamCallback')),
  getReportLog: /*#__PURE__*/t.func('ILogResponse', /*#__PURE__*/t.param('request', 'ILogRequest')),
  getControlLog: /*#__PURE__*/t.func('ILogResponse', /*#__PURE__*/t.param('request', 'ILogRequest')),
  find: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IValue'), /*#__PURE__*/t.param('options', 'any'), /*#__PURE__*/t.param('quantity', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('all'))), /*#__PURE__*/t.param('usage', 'string')),
  findByName: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IValue'), /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('quantity', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('all'))), /*#__PURE__*/t.param('usage', 'string')),
  findByType: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IValue'), /*#__PURE__*/t.param('type', 'string'), /*#__PURE__*/t.param('quantity', /*#__PURE__*/t.union('number', /*#__PURE__*/t.lit('all'))), /*#__PURE__*/t.param('usage', 'string')),
  findAllByName: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IValue'), /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('usage', 'string')),
  findAllByType: /*#__PURE__*/t.func( /*#__PURE__*/t.array('IValue'), /*#__PURE__*/t.param('type', 'string'), /*#__PURE__*/t.param('usage', 'string')),
  findById: /*#__PURE__*/t.func('IValue', /*#__PURE__*/t.param('id', 'string')),
  addEvent: /*#__PURE__*/t.func('IEventLog', /*#__PURE__*/t.param('level', 'EventLogLevel'), /*#__PURE__*/t.param('message', 'string'), /*#__PURE__*/t.param('info', 'any', true))
});
var StateType = /*#__PURE__*/t.union( /*#__PURE__*/t.lit('Report'), /*#__PURE__*/t.lit('Control'));
var StateStatus = /*#__PURE__*/t.union( /*#__PURE__*/t.lit('Send'), /*#__PURE__*/t.lit('Pending'), /*#__PURE__*/t.lit('Failed'));
var IState = /*#__PURE__*/t.iface([], {
  type: 'StateType',
  status: /*#__PURE__*/t.opt('StateStatus'),
  data: /*#__PURE__*/t.opt('string'),
  timestamp: /*#__PURE__*/t.opt('string')
});
var IStateFunc = /*#__PURE__*/t.iface([], {
  constructor: /*#__PURE__*/t.func('IState', /*#__PURE__*/t.param('type', 'StateType', true))
});
var EventLogLevel = /*#__PURE__*/t.union( /*#__PURE__*/t.lit('important'), /*#__PURE__*/t.lit('error'), /*#__PURE__*/t.lit('success'), /*#__PURE__*/t.lit('warning'), /*#__PURE__*/t.lit('info'), /*#__PURE__*/t.lit('debug'));
var IEventLog = /*#__PURE__*/t.iface([], {
  message: 'string',
  level: 'EventLogLevel',
  info: /*#__PURE__*/t.opt('any'),
  type: /*#__PURE__*/t.opt('string'),
  timestamp: /*#__PURE__*/t.opt('Date')
});
var IEventLogFunc = /*#__PURE__*/t.iface([], {
  constructor: /*#__PURE__*/t.func('IEventLog', /*#__PURE__*/t.param('level', 'EventLogLevel'), /*#__PURE__*/t.param('message', 'string'))
});
var INotificationCustomData = /*#__PURE__*/t.iface([], {
  all: 'boolean',
  future: 'boolean',
  selected: /*#__PURE__*/t.array('any')
});
var INotificationCustom = /*#__PURE__*/t.iface([], {
  type: 'string',
  quantity: 'number',
  limitation: /*#__PURE__*/t.array('any'),
  method: /*#__PURE__*/t.array('any'),
  option: 'any',
  message: 'string',
  name_installation: 'string',
  title_installation: /*#__PURE__*/t.union('string', 'null'),
  data: /*#__PURE__*/t.opt('INotificationCustomData')
});
var INotificationBase = /*#__PURE__*/t.iface([], {
  action: 'string',
  code: 'number',
  type: 'string',
  from: 'string',
  to: 'string',
  from_type: 'string',
  from_name: 'string',
  to_type: 'string',
  type_ids: 'string',
  priority: 'number',
  ids: /*#__PURE__*/t.array('string'),
  info: /*#__PURE__*/t.array('any'),
  identifier: 'string'
});
var INotificationFunc = /*#__PURE__*/t.iface([], {
  notify: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('message', 'string'))
});
var LogOperation = /*#__PURE__*/t.union( /*#__PURE__*/t.lit('arbitrary'), /*#__PURE__*/t.lit('array_agg'), /*#__PURE__*/t.lit('avg'), /*#__PURE__*/t.lit('mean'), /*#__PURE__*/t.lit('count'), /*#__PURE__*/t.lit('geometric_mean'), /*#__PURE__*/t.lit('max'), /*#__PURE__*/t.lit('min'), /*#__PURE__*/t.lit('sqrdiff'), /*#__PURE__*/t.lit('stddev'), /*#__PURE__*/t.lit('sum'), /*#__PURE__*/t.lit('variance'), /*#__PURE__*/t.lit('harmonic_mean'), /*#__PURE__*/t.lit('first'), /*#__PURE__*/t.lit('last'), /*#__PURE__*/t.lit('count_distinct'), /*#__PURE__*/t.lit('median'), /*#__PURE__*/t.lit('percentile'), /*#__PURE__*/t.lit('lower_quartile'), /*#__PURE__*/t.lit('upper_quartile'), /*#__PURE__*/t.lit('mode'));
var LogGroupBy = /*#__PURE__*/t.union( /*#__PURE__*/t.lit('year'), /*#__PURE__*/t.lit('quarter'), /*#__PURE__*/t.lit('month'), /*#__PURE__*/t.lit('week'), /*#__PURE__*/t.lit('day'), /*#__PURE__*/t.lit('hour'), /*#__PURE__*/t.lit('minute'), /*#__PURE__*/t.lit('second'), /*#__PURE__*/t.lit('millisecond'), /*#__PURE__*/t.lit('microsecond'), /*#__PURE__*/t.lit('dow'), /*#__PURE__*/t.lit('doy'));
var ILogRequest = /*#__PURE__*/t.iface([], {
  start: /*#__PURE__*/t.opt('Date'),
  end: /*#__PURE__*/t.opt('Date'),
  limit: /*#__PURE__*/t.opt('number'),
  offset: /*#__PURE__*/t.opt('number'),
  operation: /*#__PURE__*/t.opt('LogOperation'),
  group_by: /*#__PURE__*/t.opt('LogGroupBy'),
  timestamp_format: /*#__PURE__*/t.opt('string'),
  timezone: /*#__PURE__*/t.opt('string'),
  order: /*#__PURE__*/t.opt( /*#__PURE__*/t.union( /*#__PURE__*/t.lit('ascending'), /*#__PURE__*/t.lit('descending'))),
  order_by: /*#__PURE__*/t.opt('string')
});
var ILogResponse = /*#__PURE__*/t.iface([], {
  meta: 'IMeta',
  data: 'any',
  more: 'boolean',
  type: 'string'
});
var EventType = /*#__PURE__*/t.union( /*#__PURE__*/t.lit('create'), /*#__PURE__*/t.lit('update'), /*#__PURE__*/t.lit('delete'), /*#__PURE__*/t.lit('direct'));
var IStreamEvent = /*#__PURE__*/t.iface([], {
  path: 'string',
  event: 'EventType',
  data: /*#__PURE__*/t.opt('any'),
  meta_object: /*#__PURE__*/t.opt('IMeta'),
  meta: /*#__PURE__*/t.opt('IMeta'),
  extsync: /*#__PURE__*/t.opt('any')
});
var IStreamModel = /*#__PURE__*/t.iface([], {
  path: /*#__PURE__*/t.func('string'),
  handleStream: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('event', 'IStreamEvent'))
});
var IStreamFunc = /*#__PURE__*/t.iface([], {
  subscribe: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('model', 'IStreamModel')),
  sendInternal: /*#__PURE__*/t.func('any', /*#__PURE__*/t.param('type', 'string')),
  subscribeInternal: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('type', 'string'), /*#__PURE__*/t.param('handler', 'ServiceHandler')),
  subscribeService: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('service', 'string'), /*#__PURE__*/t.param('handler', 'ServiceHandler')),
  addSignalHandler: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('type', 'string'), /*#__PURE__*/t.param('handler', 'SignalHandler')),
  sendRequest: /*#__PURE__*/t.func('any', /*#__PURE__*/t.param('msg', 'any')),
  sendEvent: /*#__PURE__*/t.func('any', /*#__PURE__*/t.param('type', 'string'), /*#__PURE__*/t.param('msg', 'string')),
  sendResponse: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('event', 'any'), /*#__PURE__*/t.param('code', 'number'), /*#__PURE__*/t.param('msg', 'any')),
  onRequest: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('handler', 'RequestHandler'), /*#__PURE__*/t.param('internal', 'boolean')),
  onWebHook: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('handler', 'RequestHandler')),
  fromForeground: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('callback', 'RequestHandler'))
});
var OAuthRequestHandler = /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('url', 'string'));
var IOAuthFunc = /*#__PURE__*/t.iface([], {
  constructor: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('name', 'string', true)),
  getToken: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('handler', 'OAuthRequestHandler', true)),
  staticGetToken: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('handler', 'OAuthRequestHandler', true))
});
var IWappStorageFunc = /*#__PURE__*/t.iface([], {
  wappStorage: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('name', 'string', true)),
  constructor: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('name', 'string')),
  set: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('name', 'string'), /*#__PURE__*/t.param('item', 'any')),
  get: /*#__PURE__*/t.func('any', /*#__PURE__*/t.param('name', 'string')),
  onChange: /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('cb', 'StorageChangeHandler'))
});
var StorageChangeHandler = /*#__PURE__*/t.func('void');
var SignalHandler = /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('event', 'string'));
var ServiceHandler = /*#__PURE__*/t.func( /*#__PURE__*/t.union( /*#__PURE__*/t.union( /*#__PURE__*/t.lit(true), 'undefined'), 'boolean'), /*#__PURE__*/t.param('event', 'any'));
var RequestHandler = /*#__PURE__*/t.func( /*#__PURE__*/t.union('any', 'any'), /*#__PURE__*/t.param('event', 'any'));
var StreamCallback = /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('model', 'IStreamModel'));
var ValueStreamCallback = /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('value', 'IValueBase'), /*#__PURE__*/t.param('data', 'string'), /*#__PURE__*/t.param('timestamp', 'string'));
var RefreshStreamCallback = /*#__PURE__*/t.func('void', /*#__PURE__*/t.param('value', 'IValueBase'), /*#__PURE__*/t.param('origin', /*#__PURE__*/t.union( /*#__PURE__*/t.lit('user'), /*#__PURE__*/t.lit('period'))));
var exportedTypeSuite = {
  ValidationType: ValidationType,
  IConfig: IConfig,
  IConfigFunc: IConfigFunc,
  IModel: IModel,
  IModelFunc: IModelFunc,
  IConnection: IConnection,
  IMeta: IMeta,
  INetwork: INetwork,
  INetworkFunc: INetworkFunc,
  IDevice: IDevice,
  IDeviceFunc: IDeviceFunc,
  IPermissionModelFunc: IPermissionModelFunc,
  ValuePermission: ValuePermission,
  IValue: IValue,
  IValueBase: IValueBase,
  IValueNumberBase: IValueNumberBase,
  IValueStringBlobBase: IValueStringBlobBase,
  IValueXmlBase: IValueXmlBase,
  IValueNumber: IValueNumber,
  IValueString: IValueString,
  IValueBlob: IValueBlob,
  IValueXml: IValueXml,
  IValueFunc: IValueFunc,
  StateType: StateType,
  StateStatus: StateStatus,
  IState: IState,
  IStateFunc: IStateFunc,
  EventLogLevel: EventLogLevel,
  IEventLog: IEventLog,
  IEventLogFunc: IEventLogFunc,
  INotificationCustomData: INotificationCustomData,
  INotificationCustom: INotificationCustom,
  INotificationBase: INotificationBase,
  INotificationFunc: INotificationFunc,
  LogOperation: LogOperation,
  LogGroupBy: LogGroupBy,
  ILogRequest: ILogRequest,
  ILogResponse: ILogResponse,
  EventType: EventType,
  IStreamEvent: IStreamEvent,
  IStreamModel: IStreamModel,
  IStreamFunc: IStreamFunc,
  OAuthRequestHandler: OAuthRequestHandler,
  IOAuthFunc: IOAuthFunc,
  IWappStorageFunc: IWappStorageFunc,
  StorageChangeHandler: StorageChangeHandler,
  SignalHandler: SignalHandler,
  ServiceHandler: ServiceHandler,
  RequestHandler: RequestHandler,
  StreamCallback: StreamCallback,
  ValueStreamCallback: ValueStreamCallback,
  RefreshStreamCallback: RefreshStreamCallback
};

var Config = function Config() {
  this.debug = false;
  this.verbose = false;
  this.validation = 'normal';
  this.reconnectCount = 10;
  this.jitterMin = 1;
  this.jitterMax = 10;
};

var _checker = /*#__PURE__*/createCheckers(exportedTypeSuite);

var _config = /*#__PURE__*/new Config();
function config(param) {
  var m = _checker.IConfigFunc.methodArgs('config');

  if (_config.validation === 'normal') {
    m.check(Array.from(arguments));
  }

  if (param.debug !== undefined) {
    _config.debug = param.debug;
  }

  if (param.verbose !== undefined) {
    _config.verbose = param.verbose;
  }

  if (param.validation !== undefined) {
    _config.validation = param.validation;
  }

  if (param.reconnectCount !== undefined) {
    _config.reconnectCount = param.reconnectCount;
  }

  if (param.jitterMin !== undefined) {
    _config.jitterMin = param.jitterMin;
  }

  if (param.jitterMax !== undefined) {
    _config.jitterMax = param.jitterMax;
  }

  return _config;
}

var ValueTemplate = function ValueTemplate() {};
ValueTemplate.version = '0.0.3';
ValueTemplate.BOOLEAN_TRUEFALSE = {
  type: 'boolean',
  name: '',
  permission: 'r',
  number: {
    mapping: {
      '0': 'false',
      '1': 'true'
    },
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 1,
    step: 1,
    si_conversion: undefined,
    unit: ''
  }
};
ValueTemplate.BOOLEAN_ONOFF = {
  type: 'boolean',
  name: '',
  permission: 'r',
  number: {
    mapping: {
      '0': 'off',
      '1': 'on'
    },
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 1,
    step: 1,
    si_conversion: undefined,
    unit: ''
  }
};
ValueTemplate.CONNECTION_STATUS = {
  type: 'connection',
  name: '',
  permission: 'r',
  number: {
    mapping: {
      '0': 'offline',
      '1': 'online'
    },
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 1,
    step: 1,
    si_conversion: undefined,
    unit: ''
  }
};
ValueTemplate.VOLTAGE_V = {
  type: 'voltage',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 250,
    step: 0.1,
    si_conversion: undefined,
    unit: 'V'
  }
};
ValueTemplate.POWER_WATT = {
  type: 'power',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 2500,
    step: 0.1,
    si_conversion: undefined,
    unit: 'W'
  }
};
ValueTemplate.POWER_KW = {
  type: 'power',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 1000000,
    step: 0.1,
    si_conversion: '[W] = 1000 * [kW]',
    unit: 'kW'
  }
};
ValueTemplate.ENERGY_WH = {
  type: 'energy',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 100000,
    step: 0.1,
    si_conversion: undefined,
    unit: 'Wh'
  }
};
ValueTemplate.ENERGY_KWH = {
  type: 'energy',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 1000000,
    step: 0.1,
    si_conversion: '[J] = 3600000 * [kWh]  ',
    unit: 'kWh'
  }
};
ValueTemplate.TEMPERATURE_CELSIUS = {
  type: 'temperature',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: false,
    min: -30,
    max: 50,
    step: 1,
    si_conversion: '[K] = [°C] + 273.15',
    unit: '°C'
  }
};
ValueTemplate.TEMPERATURE_FAHRENHEIT = {
  type: 'temperature',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: false,
    min: -20,
    max: 120,
    step: 1,
    si_conversion: '[K] = ([°F] + 459.67) × 5/9 ',
    unit: '°F'
  }
};
ValueTemplate.TEMPERATURE_KELVIN = {
  type: 'temperature',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: true,
    min: 240,
    max: 320,
    step: 1,
    si_conversion: undefined,
    unit: 'K'
  }
};
ValueTemplate.ANGLE = {
  type: 'angle',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 360,
    step: 0,
    si_conversion: '[rad] = (180/pi) * [°]',
    unit: '°'
  }
};
ValueTemplate.PERCENTAGE = {
  type: 'percentage',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 100,
    step: 1,
    si_conversion: '[1] = 100 * [%]',
    unit: '%'
  }
};
ValueTemplate.SPEED_MS = {
  type: 'speed',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 100,
    step: 1,
    si_conversion: undefined,
    unit: 'm/s'
  }
};
ValueTemplate.PRECIPITATION_MM = {
  type: 'precipitation',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 100,
    step: 1,
    si_conversion: undefined,
    unit: 'mm'
  }
};
ValueTemplate.HUMIDITY = {
  type: 'relative_humidity',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: true,
    min: 0,
    max: 100,
    step: 1,
    si_conversion: '[1] = 100 * [%]',
    unit: '%'
  }
};
ValueTemplate.CO2_PPM = {
  type: 'co2',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: true,
    min: 0,
    max: 3000,
    step: 1,
    si_conversion: '1000000 * [ppm]',
    unit: 'ppm'
  }
};
ValueTemplate.CONCENTRATION_PPM = {
  type: 'concentration',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: true,
    min: 0,
    max: 3000,
    step: 1,
    si_conversion: '1000000 * [ppm]',
    unit: 'ppm'
  }
};
ValueTemplate.PRESSURE_HPA = {
  name: '',
  permission: 'r',
  type: 'pressure',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 300,
    max: 1100,
    step: 1,
    si_conversion: '[Pa] = [hPa]/100',
    unit: 'hPa'
  }
};
ValueTemplate.TIMESTAMP = {
  type: 'timestamp',
  name: '',
  permission: 'r',
  string: {
    max: 27,
    encoding: 'ISO 8601'
  }
};
ValueTemplate.DISTANCE_M = {
  type: 'distance',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 1000,
    step: 1,
    si_conversion: undefined,
    unit: 'm'
  }
};
ValueTemplate.LUMINOUSITY_LX = {
  type: 'luminousity',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 0,
    max: 25000,
    step: 1,
    si_conversion: undefined,
    unit: 'lx'
  }
};
ValueTemplate.COLOR_HEX = {
  type: 'color',
  name: '',
  permission: 'r',
  blob: {
    max: 6,
    encoding: 'hex'
  }
};
ValueTemplate.COLOR_INT = {
  type: 'color',
  name: '',
  permission: 'r',
  blob: {
    max: 8,
    encoding: 'integer'
  }
};
ValueTemplate.COLOR_TEMPERATURE = {
  type: 'color_temperature',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: 1000,
    max: 12000,
    step: 1,
    si_conversion: undefined,
    unit: 'K'
  }
};
ValueTemplate.IMAGE_JPG = {
  type: 'image',
  name: '',
  permission: 'r',
  blob: {
    max: 255,
    encoding: 'base64'
  }
};
ValueTemplate.LATITUDE = {
  type: 'latitude',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: -90,
    max: 90,
    step: 0.000001,
    si_conversion: undefined,
    unit: '°N'
  }
};
ValueTemplate.LONGITUDE = {
  type: 'longitude',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: -180,
    max: 180,
    step: 0.000001,
    si_conversion: undefined,
    unit: '°E'
  }
};
ValueTemplate.ALTITUDE_M = {
  type: 'altitude',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: -10000,
    max: 10000,
    step: 0.01,
    si_conversion: undefined,
    unit: 'm'
  }
};
ValueTemplate.STREET = {
  type: 'street',
  name: '',
  permission: 'r',
  string: {
    max: 85,
    encoding: ''
  }
};
ValueTemplate.CITY = {
  type: 'city',
  name: '',
  permission: 'r',
  string: {
    max: 85,
    encoding: ''
  }
};
ValueTemplate.POSTCODE = {
  type: 'postcode',
  name: '',
  permission: 'r',
  string: {
    max: 10,
    encoding: ''
  }
};
ValueTemplate.COUNTRY = {
  name: '',
  permission: 'r',
  type: 'country',
  string: {
    max: 56,
    encoding: ''
  }
};
ValueTemplate.COUNTRY_CODE = {
  type: 'country_code',
  name: '',
  permission: 'r',
  string: {
    max: 2,
    encoding: 'ISO 3166-1 Alpha-2'
  }
};
ValueTemplate.ADDRESS_NAME = {
  type: 'address_name',
  name: '',
  permission: 'r',
  string: {
    max: 85,
    encoding: ''
  }
};
ValueTemplate.ORGANISATION = {
  type: 'organisation',
  name: '',
  permission: 'r',
  string: {
    max: 85,
    encoding: ''
  }
};
ValueTemplate.IDENTIFIER = {
  type: 'identifier',
  name: '',
  permission: 'r',
  string: {
    max: 50,
    encoding: ''
  }
};
ValueTemplate.NUMBER = {
  type: 'number',
  name: '',
  permission: 'r',
  number: {
    mapping: undefined,
    ordered_mapping: undefined,
    meaningful_zero: undefined,
    min: -128,
    max: 128,
    step: 0.1,
    si_conversion: undefined,
    unit: ''
  }
};
ValueTemplate.STRING = {
  type: 'string',
  name: '',
  permission: 'r',
  string: {
    max: 64,
    encoding: ''
  }
};
ValueTemplate.BLOB = {
  type: 'blob',
  name: '',
  permission: 'r',
  blob: {
    max: 280,
    encoding: 'base64'
  }
};
ValueTemplate.XML = {
  type: 'xml',
  name: '',
  permission: 'r',
  xml: {
    xsd: '',
    namespace: ''
  }
};

function isBrowser() {
  return typeof window !== 'undefined' && Object.prototype.toString.call(window) === '[object Window]';
}
function isUUID(data) {
  var reg = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-b8-9][a-f0-9]{3}-[a-f0-9]{12}$/i;
  return reg.test(data);
}
function checkList(list, check) {
  for (var i = 0; i < list.length; i++) {
    if (list[i] === check || list[i].toString() === check.toString()) {
      return true;
    }
  }

  return false;
}
function getSecondsToNextPeriod(period) {
  var now = Date.now();
  var midnight = new Date(new Date().setUTCHours(0, 0, 0, 0)).getTime();
  var seconds_since_midnight = (now - midnight) / 1000;
  var seconds_to_next_period = (Math.floor(seconds_since_midnight / period) + 1) * period;
  return seconds_to_next_period - seconds_since_midnight;
}
function randomIntFromInterval(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
function isPositiveInteger(str) {
  var num = Number(str);

  if (Number.isInteger(num) && num > 0) {
    return true;
  }

  return false;
}

/**
 * Reads a cookie with the giving name.
 *
 * @param {name The name of the cookie to read}
 *
 * @return The content of the cookie if found, else null
 */

function readCookie(name) {
  var nameEQ = name + '=';
  var ca = window.document.cookie.split(';');

  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];
    c = c.trim();

    if (c.indexOf(nameEQ) === 0) {
      return c.substring(nameEQ.length, c.length);
    }
  }

  return '';
}
/**
 * @param {the key to }
 */


function get(key) {
  var result = '';

  if (isBrowser()) {
    result = window.sessionStorage.getItem(key) || '';

    if (!result) {
      result = readCookie(key);
    }
  }

  if (!result) {
    result = process.env[key] || '';
  }

  return result;
} //    tmpBaseUrl = process.env.baseUrl && process.env.baseUrl.slice(0, -1);


var baseUrl = /*#__PURE__*/get('baseUrl') || '/services';
var session = /*#__PURE__*/get('sessionID') || '';
var extSyncToken = /*#__PURE__*/get('tokenID') || '';
/*
if (!isUUID(session)) {
    console.error("Wappsto: Invalid SESSION - You need to define 'sessionID'");
}
if (!isUUID(token)) {
    console.error("Wappsto: Invalid TOKEN - You need to define 'tokenID'");
}*/

function printDebug(message) {
  if (_config.debug) {
    console.log("WAPPSTO DEBUG: " + message);
  }
}
function printError(message) {
  if (typeof message === 'string') {
    console.error("WAPPSTO ERROR: " + message);
  } else {
    var e = message;
    console.error("WAPPSTO ERROR: " + e.stack);
  }
}

var wappsto = /*#__PURE__*/axios.create({
  baseURL: baseUrl,
  headers: {
    'X-Session': session,
    'Content-Type': 'application/json'
  }
});
function getErrorResponse(error) {
  /* istanbul ignore next */
  if (axios.isAxiosError(error)) {
    var _error$response;

    return error == null ? void 0 : (_error$response = error.response) == null ? void 0 : _error$response.data;
  } else {
    return error;
  }
}

function getErrorMessage(error) {
  /* istanbul ignore next */
  if (error.errno && error.errno === -111) {
    return "Failed to connect to " + error.address;
  }

  if (error.response) {
    var _error$response$data;

    if ((_error$response$data = error.response.data) != null && _error$response$data.code) {
      switch (error.response.data.code) {
        case 507000000:
          return 'Timeout, waiting for response on extsync request';

        default:
          printDebug(JSON.stringify(error.response.data));
          return error.response.data.message;
      }
    } else {
      return error.response.statusText + " for " + error.config.url;
    }
  }
  /* istanbul ignore next */


  if (error instanceof TypeError) {
    return error.toString();
  }
  /* istanbul ignore next */


  printDebug(JSON.stringify(error));
  /* istanbul ignore next */

  return "Unknown HTTP error: " + error.errno + " (" + error.code + ")";
}

function printHttpError(error) {
  var msg = getErrorMessage(error);
  printError(msg);
  return msg;
}

var defaultConsole = /*#__PURE__*/Object.assign({}, console);

function sendExtsync(key) {
  var time = new Date().toISOString();
  var data = JSON.stringify({
    key: key,
    arguments: arguments.length <= 1 ? undefined : arguments[1],
    time: time
  });
  return wappsto.post('/2.0/extsync/wappsto/editor/console', data)["catch"](function (e) {
    /* istanbul ignore next */
    printDebug(e);
  });
}

function startLogging() {
  var newFunc = function newFunc(name) {
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      sendExtsync(name, arguments);
      defaultConsole.log.apply(defaultConsole, args);
    };
  };

  console.log = newFunc('log');
  console.info = newFunc('info');
  console.error = newFunc('error');
  console.warn = newFunc('warn');
  /* istanbul ignore next */

  process.on('uncaughtException', function (err) {
    var req = sendExtsync('error', [err.stack]);
    req["finally"](function () {
      process.exit(1);
    });
  });
}
function stopLogging() {
  Object.assign(console, defaultConsole);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var runtime = {exports: {}};

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (module) {
var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
}(runtime));

var _regeneratorRuntime = runtime.exports;

var url = 'https://tracer.iot.seluxit.com/trace';
var traceId = '';
var parentId = '';
var name = '';
function getTraceId() {
  return traceId;
}
function clearTrace(status) {
  if (parentId !== '') {
    _trace(parentId, status);
  }

  traceId = '';
  name = '';
  parentId = '';
}

function _trace(parent, status) {
  var params = {
    parent: parent,
    name: name,
    id: traceId,
    status: status
  };

  if (!isBrowser()) {
    /* istanbul ignore next */
    params['user'] = process.env['USER'] || process.env['USERNAME'];
    params['installation'] = process.env['installationID'] || 'local';
    params['development'] = process.env['development'] || 'true';
  }

  wappsto.get(url, {
    params: params
  });
}

function trace(parent) {
  parentId = parent;
  traceId = "WAPP_" + Math.random().toString(36).replace(/[^a-z]+/g, '');
  name = 'STREAM ';
  /* istanbul ignore next */

  if (isBrowser()) {
    /* istanbul ignore next */
    name += 'Foreground ';
  } else {
    name += 'Background ';
  }

  name += 'Wapp';

  _trace(parent, 'pending');
}

var Model = /*#__PURE__*/function () {
  function Model(type, version) {
    if (version === void 0) {
      version = '2.0';
    }

    this.meta = {};
    this.parent = void 0;
    this.meta.type = type;
    this.meta.version = version;
  }

  var _proto = Model.prototype;

  _proto.id = function id() {
    return this.meta.id || '';
  };

  _proto.url = function url() {
    return "/" + this.meta.version + "/" + this.meta.type;
  };

  _proto.path = function path() {
    return "/" + this.meta.type + "/" + this.id();
  }
  /* eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars */
  ;

  _proto.removeChild = function removeChild(_) {}
  /* istanbul ignore next */
  ;

  _proto.attributes = function attributes() {
    return [];
  };

  _proto.setParent = function setParent(parent) {
    Model.validateMethod('Model', 'setParent', arguments);
    this.parent = parent;
  }
  /* eslint-disable-next-line @typescript-eslint/no-empty-function */
  ;

  _proto.perserve = function perserve() {}
  /* eslint-disable-next-line @typescript-eslint/no-empty-function */
  ;

  _proto.restore = function restore() {};

  _proto.validate = function validate(name, params) {
    Model.validateMethod(this.meta.type, name, params);
  };

  _proto.getUrl = function getUrl() {
    if (this.meta.id) {
      return this.url() + '/' + this.id();
    } else if (this.parent) {
      return this.parent.getUrl() + '/' + this.meta.type;
    }

    return this.url();
  };

  _proto._create = /*#__PURE__*/function () {
    var _create2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
      var valid,
          response,
          _args = arguments;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (params === void 0) {
                params = {};
              }

              Model.validateMethod('Model', 'create', _args);

              if (!this.parent) {
                _context.next = 7;
                break;
              }

              valid = false;
              this.getUrl().split('/').forEach(function (u) {
                if (isUUID(u)) {
                  valid = true;
                }
              });
              /* istanbul ignore next */

              if (valid) {
                _context.next = 7;
                break;
              }

              throw new Error("Can't create a child under a parent that do not have an ID");

            case 7:
              _context.next = 9;
              return wappsto.post(this.getUrl(), this.toJSON(), Model.generateOptions(params));

            case 9:
              response = _context.sent;
              this.perserve();
              this.parse(response.data);
              this.restore();

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function _create(_x) {
      return _create2.apply(this, arguments);
    }

    return _create;
  }();

  _proto.create = /*#__PURE__*/function () {
    var _create3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
      var _args2 = arguments;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (params === void 0) {
                params = {};
              }

              Model.validateMethod('Model', 'create', _args2);
              _context2.prev = 2;
              _context2.next = 5;
              return this._create(params);

            case 5:
              _context2.next = 10;
              break;

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](2);

              /* istanbul ignore next */
              printHttpError(_context2.t0);

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[2, 7]]);
    }));

    function create(_x2) {
      return _create3.apply(this, arguments);
    }

    return create;
  }();

  _proto.update = /*#__PURE__*/function () {
    var _update = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var response;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return wappsto.patch(this.getUrl(), this.toJSON(), Model.generateOptions());

            case 3:
              response = _context3.sent;
              this.parse(response.data);
              _context3.next = 10;
              break;

            case 7:
              _context3.prev = 7;
              _context3.t0 = _context3["catch"](0);

              /* istanbul ignore next */
              printHttpError(_context3.t0);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 7]]);
    }));

    function update() {
      return _update.apply(this, arguments);
    }

    return update;
  }();

  _proto.reload = /*#__PURE__*/function () {
    var _reload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      var response;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              _context4.next = 3;
              return wappsto.get(this.getUrl(), Model.generateOptions());

            case 3:
              response = _context4.sent;
              this.parse(response.data);
              _context4.next = 10;
              break;

            case 7:
              _context4.prev = 7;
              _context4.t0 = _context4["catch"](0);

              /* istanbul ignore next */
              printHttpError(_context4.t0);

            case 10:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 7]]);
    }));

    function reload() {
      return _reload.apply(this, arguments);
    }

    return reload;
  }();

  _proto["delete"] = /*#__PURE__*/function () {
    var _delete2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      var _this$parent;

      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              _context5.next = 3;
              return wappsto["delete"](this.getUrl(), Model.generateOptions());

            case 3:
              (_this$parent = this.parent) == null ? void 0 : _this$parent.removeChild(this);
              this.meta.id = undefined;
              _context5.next = 10;
              break;

            case 7:
              _context5.prev = 7;
              _context5.t0 = _context5["catch"](0);

              /* istanbul ignore next */
              printHttpError(_context5.t0);

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 7]]);
    }));

    function _delete() {
      return _delete2.apply(this, arguments);
    }

    return _delete;
  }();

  _proto.parse = function parse(json) {
    Model.validateMethod('Model', 'parse', arguments);

    if (isArray(json)) {
      json = json[0];
    }

    var oldModel = this.toJSON();
    Object.assign(this, pick(json, this.attributes().concat(['meta'])));
    var newModel = this.toJSON();
    return !isEqual(oldModel, newModel);
  }
  /* istanbul ignore next */
  ;

  _proto.parseChildren = function parseChildren(json) {
    return false;
  };

  _proto.toJSON = function toJSON() {
    var meta = Object.assign({}, pick(this.meta, ['id', 'type', 'version']));
    return Object.assign({
      meta: meta
    }, this.removeUndefined(pick(this, this.attributes())));
  };

  Model.fromArray = function fromArray(json, parent) {
    var obj = plainToClass(this, json);
    obj.forEach(function (o) {
      var o2 = o;
      o2.setParent(parent);
    });
    return obj;
  };

  Model.validateMethod = function validateMethod(type, name, params) {
    if (type !== undefined && _config.validation !== 'none') {
      var c = Object.keys(Model.checker).find(function (k) {
        return k.toLowerCase() === "i" + type.toLowerCase() + "func";
      });
      /* istanbul ignore else */

      if (c) {
        var m = Model.checker[c].methodArgs(name);

        try {
          m.check(Array.from(params));
        } catch (e) {
          var err = e.message.replaceAll('value.', '');
          e.message = type + "." + name + ": " + err;
          throw e;
        }
      } else {
        printError("Failed to find functions for " + type);
      }
    }
  };

  Model.generateOptions = function generateOptions(params) {
    var options = {
      params: {}
    };

    if (params) {
      Object.assign(options.params, params);
    }

    if (_config.verbose) {
      options.params['verbose'] = true;
    }

    if (getTraceId()) {
      options.params['trace'] = getTraceId();
    }

    if (Object.keys(options.params).length === 0) {
      options = omit(options, 'params');
    }

    return options;
  };

  _proto.removeUndefined = function removeUndefined(obj) {
    var _this = this;

    if (obj) {
      Object.keys(obj).forEach(function (key) {
        var value = obj[key];
        var type = typeof value;

        if (type === 'object') {
          _this.removeUndefined(value);
        } else if (type === 'undefined') {
          delete obj[key];
        }
      });
    }

    return obj;
  };

  return Model;
}();
Model.checker = /*#__PURE__*/createCheckers(exportedTypeSuite);

Model.fetch = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(endpoint, params, throwError) {
    var res, response, msg;
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            Model.validateMethod('Model', 'fetch', [endpoint, params, throwError]);
            res = [];
            _context6.prev = 2;
            _context6.next = 5;
            return wappsto.get(endpoint, Model.generateOptions(params));

          case 5:
            response = _context6.sent;

            if (response != null && response.data) {
              if (isArray(response.data)) {
                res = response.data;
              } else if (response.data) {
                res = [response.data];
              }
            }

            _context6.next = 14;
            break;

          case 9:
            _context6.prev = 9;
            _context6.t0 = _context6["catch"](2);
            msg = printHttpError(_context6.t0);

            if (!throwError) {
              _context6.next = 14;
              break;
            }

            throw msg;

          case 14:
            return _context6.abrupt("return", res);

          case 15:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[2, 9]]);
  }));

  return function (_x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();

var Notification = /*#__PURE__*/function (_Model) {
  _inheritsLoose(Notification, _Model);

  function Notification() {
    var _this;

    _this = _Model.call(this, 'notification', '2.1') || this;
    _this.read = void 0;
    _this.base = void 0;
    _this.custom = void 0;
    _this.times = void 0;
    _this.timestamp = void 0;
    _this.identifier = void 0;
    return _this;
  }

  var _proto = Notification.prototype;

  _proto.getIds = function getIds() {
    var _this$base;

    var ids = [];

    if ((_this$base = this.base) != null && _this$base.ids) {
      ids = this.base.ids;
    }

    if (ids.length === 0) {
      var _this$custom, _this$custom$data;

      if ((_this$custom = this.custom) != null && (_this$custom$data = _this$custom.data) != null && _this$custom$data.selected) {
        ids = this.custom.data.selected.map(function (m) {
          return m.meta.id;
        });
      }
    }

    return ids;
  };

  return Notification;
}(Model);
Notification.endpoint = '/2.1/notification';

/* eslint-disable @typescript-eslint/no-var-requires */

var WebSocket = /*#__PURE__*/require('universal-websocket-client');

var IgnoreError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(IgnoreError, _Error);

  function IgnoreError(msg) {
    var _this;

    _this = _Error.call(this, msg) || this; // Set the prototype explicitly.

    Object.setPrototypeOf(_assertThisInitialized(_this), IgnoreError.prototype);
    return _this;
  }

  return IgnoreError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
var Stream = /*#__PURE__*/function (_Model) {
  _inheritsLoose(Stream, _Model);

  function Stream() {
    var _this2;

    _this2 = _Model.call(this, 'stream', '2.1') || this;
    _this2.socket = void 0;
    _this2.websocketUrl = '';
    _this2.ignoreReconnect = false;
    _this2.models = {};
    _this2.services = {};
    _this2.handlers = {};
    _this2.subscriptions = [];
    _this2.opened = false;
    _this2.backoff = 1;
    _this2.waiting = [];
    _this2.onRequestHandlers = {
      0: [],
      1: []
    };

    _this2.onRequestHandler = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {
        var res, handlers, i, p;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                handlers = _this2.onRequestHandlers[Number(event.uri === 'extsync/')];
                i = 0;

              case 3:
                if (!(i < handlers.length)) {
                  _context.next = 17;
                  break;
                }

                p = void 0;

                try {
                  p = handlers[i](event.body);
                } catch (err) {
                  if (!(err instanceof IgnoreError)) {
                    printError(err);

                    _this2.sendResponse(event, 400, {
                      error: err.message
                    });
                  }
                }

                if (!p) {
                  _context.next = 13;
                  break;
                }

                if (!p.then) {
                  _context.next = 12;
                  break;
                }

                p.then(function (res) {
                  _this2.sendResponse(event, 200, res);
                })["catch"](function (err) {
                  if (!(err instanceof IgnoreError)) {
                    printError(err);

                    _this2.sendResponse(event, 400, {
                      error: err.message
                    });
                  }
                });
                return _context.abrupt("continue", 14);

              case 12:
                res = p;

              case 13:
                _this2.sendResponse(event, 200, res);

              case 14:
                i++;
                _context.next = 3;
                break;

              case 17:
                _context.next = 24;
                break;

              case 19:
                _context.prev = 19;
                _context.t0 = _context["catch"](0);

                _this2.sendResponse(event, 501, _context.t0);

                printError('An error happend when calling request handler');
                printError(JSON.stringify(_context.t0));

              case 24:
                return _context.abrupt("return", undefined);

              case 25:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 19]]);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    _this2.websocketUrl = "" + baseUrl;

    if (!_this2.websocketUrl.endsWith('/')) {
      _this2.websocketUrl += "/";
    }

    _this2.websocketUrl += "2.1/websocket/open";

    if (!_this2.websocketUrl.startsWith('http') && typeof window === 'object' && window && window.location && window.location.origin) {
      /* istanbul ignore next */
      _this2.websocketUrl = window.location.origin + _this2.websocketUrl;
    }

    _this2.websocketUrl = _this2.websocketUrl.replace(/^http/, 'ws');
    _this2.websocketUrl += '?X-Session=' + session;
    return _this2;
  }

  var _proto = Stream.prototype;

  _proto.getTimeout = function getTimeout() {
    /* istanbul ignore next */
    if (this.backoff >= _config.reconnectCount) {
      printError("Stream failed to connect after " + this.backoff + " attemps, exit!");

      if (isBrowser()) {
        return Infinity;
      } else {
        process.exit(-1);
      }
    }

    return this.backoff * 2 * 1000;
  };

  _proto.open = function open() {
    var _this3 = this;

    return new Promise(function (resolve) {
      if (_this3.socket) {
        resolve();
        return;
      } else {
        if (_this3.opened) {
          _this3.waiting.push(resolve);

          return;
        }
      }

      _this3.opened = true;
      printDebug("Open WebSocket on " + _this3.websocketUrl);
      _this3.ignoreReconnect = false;
      var openTimeout = setTimeout(function () {
        /* istanbul ignore next */
        _this3.reconnect();
      }, 1000 + _this3.getTimeout());
      var socket = new WebSocket(_this3.websocketUrl);

      if (socket) {
        socket.onopen = function () {
          _this3.socket = socket;
          clearTimeout(openTimeout);

          _this3.addListeners();

          resolve();

          _this3.waiting.forEach(function (r) {
            r();
          });

          _this3.waiting = [];
        };
      }
    });
  };

  _proto.close = function close() {
    if (this.socket) {
      printDebug("Closing WebSocket on " + this.url);
      this.ignoreReconnect = true;
      this.socket.close();
      this.opened = false;
      this.socket = undefined;
    }
  };

  _proto.addSubscription = function addSubscription(subscription) {
    if (this.subscriptions.includes(subscription)) {
      return;
    }

    this.subscriptions.push(subscription);
    this.sendMessage('POST', '/services/2.1/websocket/open/subscription', subscription);
  };

  _proto.removeSubscription = function removeSubscription(subscription) {
    if (!this.subscriptions.includes(subscription)) {
      /* istanbul ignore next */
      return;
    }

    var index = this.subscriptions.indexOf(subscription);

    if (index !== -1) {
      this.subscriptions.splice(index, 1);
    }

    this.sendMessage('DELETE', '/services/2.1/websocket/open/subscription', subscription);
  };

  _proto.subscribe = function subscribe(model) {
    var _this4 = this;

    this.validate('subscribe', arguments);

    if (!this.models[model.path()]) {
      this.models[model.path()] = [];
    }

    if (this.models[model.path()].indexOf(model) === -1) {
      this.models[model.path()].push(model);
      this.open().then(function () {
        printDebug("Add subscription: " + model.path());

        _this4.addSubscription(model.path());
      });
      return true;
    }

    return false;
  };

  _proto.unsubscribe = function unsubscribe(model) {
    this.validate('subscribe', arguments);

    if (this.models[model.path()]) {
      var index = this.models[model.path()].indexOf(model);

      if (index !== -1) {
        this.models[model.path()].splice(index, 1);
      }

      this.removeSubscription(model.path());
    }
  };

  _proto.sendInternal = /*#__PURE__*/function () {
    var _sendInternal = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(type) {
      var _args2 = arguments;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.validate('sendInternal', _args2);
              _context2.next = 3;
              return this.sendEvent(type, '');

            case 3:
              return _context2.abrupt("return", _context2.sent);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function sendInternal(_x2) {
      return _sendInternal.apply(this, arguments);
    }

    return sendInternal;
  }();

  _proto.subscribeInternal = function subscribeInternal(type, handler) {
    this.validate('subscribeInternal', arguments);
    this.subscribeService('extsync', function (event) {
      var res = false;

      try {
        var body = JSON.parse(event.body);

        if (body.type === type) {
          res = handler(body);
        }
      } catch (e) {
        /* istanbul ignore next */
        printError('Failed to parse body in internal event as JSON');
      }

      return res;
    });
  };

  _proto.subscribeService = function subscribeService(service, handler) {
    var _this5 = this;

    this.validate('subscribeService', arguments);
    this.open().then(function () {
      if (service[0] !== '/') {
        service = '/' + service;
      }

      if (!_this5.services[service]) {
        _this5.services[service] = [];
      }

      _this5.services[service].push(handler);

      printDebug("Add service subscription: " + service);

      _this5.addSubscription(service);
    });
  };

  _proto.unsubscribeService = function unsubscribeService(service, handler) {
    this.validate('subscribeService', arguments);

    if (service[0] !== '/') {
      service = '/' + service;
    }

    if (this.services[service] !== undefined) {
      var index = this.services[service].indexOf(handler);

      if (index !== -1) {
        this.services[service].splice(index, 1);
      }

      if (this.services[service].length === 0) {
        this.removeSubscription(service);
      }
    }
  };

  _proto.addSignalHandler = function addSignalHandler(type, handler) {
    var _this6 = this;

    this.validate('addSignalHandler', arguments);
    this.open().then(function () {
      printDebug("Add Signal Handler: " + type);

      if (!_this6.handlers[type]) {
        _this6.handlers[type] = [];
      }

      _this6.handlers[type].push(handler);
    });
  };

  _proto.sendEvent = /*#__PURE__*/function () {
    var _sendEvent = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(type, msg) {
      var result,
          data,
          response,
          _args3 = arguments;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this.validate('sendEvent', _args3);
              result = {};
              _context3.prev = 2;
              data = {
                type: type,
                msg: msg
              };
              _context3.next = 6;
              return wappsto.post('/2.0/extsync', data);

            case 6:
              response = _context3.sent;
              result = response.data;
              _context3.next = 13;
              break;

            case 10:
              _context3.prev = 10;
              _context3.t0 = _context3["catch"](2);

              /* istanbul ignore next */
              printHttpError(_context3.t0);

            case 13:
              return _context3.abrupt("return", result);

            case 14:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[2, 10]]);
    }));

    function sendEvent(_x3, _x4) {
      return _sendEvent.apply(this, arguments);
    }

    return sendEvent;
  }();

  _proto.sendRequest = /*#__PURE__*/function () {
    var _sendRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(msg) {
      var result,
          response,
          _e$response$data,
          _args4 = arguments;

      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.validate('sendRequest', _args4);
              result = {};
              _context4.prev = 2;
              _context4.next = 5;
              return wappsto.post('/2.0/extsync/request', msg);

            case 5:
              response = _context4.sent;
              result = response.data;
              _context4.next = 12;
              break;

            case 9:
              _context4.prev = 9;
              _context4.t0 = _context4["catch"](2);

              /* 1istanbul ignore next */
              if ((_e$response$data = _context4.t0.response.data) != null && _e$response$data.code) {
                printHttpError(_context4.t0);
              } else {
                result = _context4.t0.response.data;
              }

            case 12:
              return _context4.abrupt("return", result);

            case 13:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[2, 9]]);
    }));

    function sendRequest(_x5) {
      return _sendRequest.apply(this, arguments);
    }

    return sendRequest;
  }();

  _proto.sendResponse = /*#__PURE__*/function () {
    var _sendResponse = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(event, code, msg) {
      var _event$meta,
          data,
          _args5 = arguments;

      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              this.validate('sendResponse', _args5);
              _context5.prev = 1;
              data = {
                code: code,
                body: msg
              };
              _context5.next = 5;
              return wappsto.patch("/2.0/extsync/response/" + (event == null ? void 0 : (_event$meta = event.meta) == null ? void 0 : _event$meta.id), data);

            case 5:
              _context5.next = 10;
              break;

            case 7:
              _context5.prev = 7;
              _context5.t0 = _context5["catch"](1);

              /* istanbul ignore next */
              printHttpError(_context5.t0);

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[1, 7]]);
    }));

    function sendResponse(_x6, _x7, _x8) {
      return _sendResponse.apply(this, arguments);
    }

    return sendResponse;
  }();

  _proto.onRequest = function onRequest(handler, internal) {
    this.validate('onRequest', arguments);

    if (this.onRequestHandlers[0].length === 0 && this.onRequestHandlers[1].length === 0) {
      this.subscribeService('/extsync/request', this.onRequestHandler);
    }

    this.onRequestHandlers[Number(internal)].push(handler);
  };

  _proto.cancelRequest = function cancelRequest(handler, internal) {
    this.validate('onRequest', arguments);
    var index = this.onRequestHandlers[Number(internal)].indexOf(handler);

    if (index !== -1) {
      this.onRequestHandlers[Number(internal)].splice(index, 1);
    }

    if (this.onRequestHandlers[0].length === 0 && this.onRequestHandlers[1].length === 0) {
      this.unsubscribeService('/extsync/request', this.onRequestHandler);
    }
  };

  _proto.reconnect = function reconnect() {
    var _this7 = this;

    this.backoff++;
    printDebug("Stream Reconnecting for the " + this.backoff + " times");
    this.close();
    this.open().then(function () {
      _this7.sendMessage('PATCH', '/services/2.1/websocket/open', {
        subscription: _this7.subscriptions
      });
    });
  };

  _proto.handleEvent = function handleEvent(type, event) {
    var _this$handlers$type;

    printDebug("Handle Event: " + type);
    (_this$handlers$type = this.handlers[type]) == null ? void 0 : _this$handlers$type.forEach(function (handler) {
      handler(event);
    });
  };

  _proto.filterCallback = function filterCallback(callback, path, result) {
    if (result === true) {
      this.services[path] = this.services[path].filter(function (item) {
        return item !== callback;
      });
    }
  };

  _proto.handleMessage = function handleMessage(type, event) {
    var _this8 = this;

    var paths = [];
    var services = [];

    if (type === 'message') {
      if (!event.path) {
        /* istanbul ignore next */
        return;
      }

      var items = event.path.split('/').filter(function (s) {
        return s.length > 0;
      });

      if (!items) {
        /* istanbul ignore next */
        return;
      }

      var last = items[items.length - 1];
      paths.push('/' + items.slice(items.length - 2, items.length).join('/'));

      if (!isUUID(last)) {
        paths.push('/' + items.slice(items.length - 3, items.length - 1).join('/'));
      }

      items.forEach(function (i) {
        if (!isUUID(i)) {
          services.push("/" + i);
        }
      });
    } else {
      services.push("/" + type);
    }

    paths.forEach(function (path) {
      var _this8$models$path;

      (_this8$models$path = _this8.models[path]) == null ? void 0 : _this8$models$path.forEach(function (model) {
        model.handleStream(event);
      });
    });
    services.forEach(function (path) {
      var tmpList = _this8.services[path];
      tmpList == null ? void 0 : tmpList.forEach(function (callback) {
        var p = callback(event);

        if (p) {
          if (p === true) {
            _this8.filterCallback(callback, path, p);
          } else {
            p.then(function (res) {
              _this8.filterCallback(callback, path, res);
            });
          }
        }
      });
    });
  };

  _proto.sendMessage = function sendMessage(method, url, body) {
    var _this$socket;

    if (body === void 0) {
      body = undefined;
    }

    var hash = {
      jsonrpc: '2.0',
      method: method,
      id: Math.floor(Math.random() * 100000),
      params: {
        url: url,
        data: undefined
      }
    };

    if (body) {
      hash.params.data = body;
    }

    printDebug("Sending a " + method + " message to " + url + ": " + JSON.stringify(hash));
    (_this$socket = this.socket) == null ? void 0 : _this$socket.send(JSON.stringify(hash));
  };

  _proto.addListeners = function addListeners() {
    var _this9 = this;

    if (!this.socket) {
      /* istanbul ignore next */
      return;
    }

    var reconnect = function reconnect() {
      setTimeout(function () {
        _this9.reconnect();
      }, _this9.getTimeout());
    };

    this.socket.onmessage = function (ev) {
      var message;
      /* istanbul ignore else */

      if (ev.type === 'message') {
        try {
          message = JSON.parse(ev.data);
        } catch (e) {
          /* istanbul ignore next */
          printError('Failed to parse stream event');
          /* istanbul ignore next */

          return;
        }
      } else {
        printError("Can't handle binary stream data");
      }

      if (message.jsonrpc) {
        if (message.result) {
          if (message.result.value !== true) {
            _this9.backoff = 1;
          }

          printDebug("Stream rpc " + message.id + " result: " + JSON.stringify(message.result.value));
        } else {
          printError("Stream rpc error: " + JSON.stringify(message.error));
        }

        return;
      }

      var messages = [];

      if (message.constructor !== Array) {
        messages = [message];
      } else {
        messages = message;
      }

      messages.forEach(function (msg) {
        var _msg$meta_object;

        printDebug("Stream message: " + JSON.stringify(msg));

        if (((_msg$meta_object = msg.meta_object) == null ? void 0 : _msg$meta_object.type) === 'extsync') {
          var newData = msg.extsync || msg.data;

          if (newData.request) {
            _this9.handleMessage('extsync/request', newData);
          } else if (newData.uri !== 'extsync/wappsto/editor/console') {
            _this9.handleMessage('extsync', newData);
          }

          return;
        }

        _this9.checkAndSendTrace(msg);

        _this9.handleMessage('message', msg);

        clearTrace('ok');
      });
    };

    this.socket.onerror = function (event) {
      try {
        _this9.handleEvent('error', event);
      } catch (e) {
        /* istanbul ignore next */
        printError('Stream error: ' + _this9.websocketUrl);
      }
    };

    this.socket.onclose = function (event) {
      if (_this9.ignoreReconnect) {
        _this9.handleEvent('close', event);
      } else {
        reconnect();
      }
    };
  };

  _proto.checkAndSendTrace = function checkAndSendTrace(event) {
    var _event$meta2;

    if (event != null && (_event$meta2 = event.meta) != null && _event$meta2.trace) {
      trace(event.meta.trace);
    }
  };

  return Stream;
}(Model);
Stream.endpoint = '/2.1/stream';

var openStream = /*#__PURE__*/new Stream();

function sendRequest(_x, _x2) {
  return _sendRequest.apply(this, arguments);
}

function _sendRequest() {
  _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(type, msg) {
    var data;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            data = {
              type: type,
              message: msg
            };
            _context.next = 3;
            return openStream.sendRequest(data);

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _sendRequest.apply(this, arguments);
}

function sendToForeground(_x3) {
  return _sendToForeground.apply(this, arguments);
}

function _sendToForeground() {
  _sendToForeground = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(msg) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", sendRequest('background', msg));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _sendToForeground.apply(this, arguments);
}

function sendToBackground(_x4) {
  return _sendToBackground.apply(this, arguments);
}

function _sendToBackground() {
  _sendToBackground = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(msg) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", sendRequest('foreground', msg));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _sendToBackground.apply(this, arguments);
}

var request_handlers = {};

function _handleRequest(_x5) {
  return _handleRequest2.apply(this, arguments);
}

function _handleRequest2() {
  _handleRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(event) {
    var data;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            data = {};
            _context4.prev = 1;
            data = JSON.parse(event);
            _context4.next = 9;
            break;

          case 5:
            _context4.prev = 5;
            _context4.t0 = _context4["catch"](1);

            /* istanbul ignore next */
            printDebug('Failed to parse event - Foreground/Background handler');
            /* istanbul ignore next */

            return _context4.abrupt("return");

          case 9:
            if (!request_handlers[data.type]) {
              _context4.next = 13;
              break;
            }

            return _context4.abrupt("return", request_handlers[data.type](data.message));

          case 13:
            throw new IgnoreError('Wrong request handler');

          case 14:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[1, 5]]);
  }));
  return _handleRequest2.apply(this, arguments);
}

function handleRequest(type, callback) {
  if (Object.keys(request_handlers).length === 0) {
    openStream.onRequest(_handleRequest, true);
  }

  request_handlers[type] = callback;
}

function fromForeground(callback) {
  Model.validateMethod('Stream', 'fromForeground', arguments);
  handleRequest('foreground', callback);
}
function fromBackground(callback) {
  Model.validateMethod('Stream', 'fromForeground', arguments);
  handleRequest('background', callback);
}
function onWebHook(handler) {
  Model.validateMethod('Stream', 'onWebHook', arguments);
  openStream.onRequest(handler, false);
}
function cancelOnWebHook(handler) {
  Model.validateMethod('Stream', 'onWebHook', arguments);
  openStream.cancelRequest(handler, false);
}

function cancelFrom(type) {
  if (request_handlers[type]) {
    delete request_handlers[type];

    if (Object.keys(request_handlers).length === 0) {
      openStream.cancelRequest(_handleRequest, true);
    }
  }
}

function cancelFromBackground() {
  cancelFrom('background');
}
function cancelFromForeground() {
  cancelFrom('foreground');
}

var PermissionModel = /*#__PURE__*/function (_Model) {
  _inheritsLoose(PermissionModel, _Model);

  function PermissionModel() {
    return _Model.apply(this, arguments) || this;
  }

  PermissionModel.getPermissionHash = function getPermissionHash(type, quantity, message) {
    return type + "-" + quantity + "-" + message;
  };

  var _proto = PermissionModel.prototype;

  _proto.create = /*#__PURE__*/function () {
    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var _this = this;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", new Promise( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve, reject) {
                  var data;
                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.prev = 0;
                          _context2.next = 3;
                          return _this._create();

                        case 3:
                          resolve();
                          _context2.next = 14;
                          break;

                        case 6:
                          _context2.prev = 6;
                          _context2.t0 = _context2["catch"](0);
                          data = getErrorResponse(_context2.t0);
                          /* istanbul ignore next */

                          if (data) {
                            _context2.next = 13;
                            break;
                          }

                          printHttpError(_context2.t0);
                          reject(_context2.t0);
                          return _context2.abrupt("return");

                        case 13:
                          if (data.code === 400008 || data.code === 400013) {
                            printDebug('Requesting permission to add data to user');
                            openStream.subscribeService('/notification', /*#__PURE__*/function () {
                              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {
                                var _event$meta_object;

                                var _notification$0$base, notification;

                                return _regeneratorRuntime.wrap(function _callee$(_context) {
                                  while (1) {
                                    switch (_context.prev = _context.next) {
                                      case 0:
                                        if (!(((_event$meta_object = event.meta_object) == null ? void 0 : _event$meta_object.type) === 'notification')) {
                                          _context.next = 17;
                                          break;
                                        }

                                        notification = Notification.fromArray([event.data]);
                                        /* istanbul ignore next */

                                        if (!(!notification || !notification[0])) {
                                          _context.next = 4;
                                          break;
                                        }

                                        return _context.abrupt("return");

                                      case 4:
                                        if (!(((_notification$0$base = notification[0].base) == null ? void 0 : _notification$0$base.code) === 1100013)) {
                                          _context.next = 17;
                                          break;
                                        }

                                        _context.prev = 5;
                                        printDebug('Got permission to create data under users account');
                                        _context.next = 9;
                                        return _this._create({
                                          identifier: 'request access to save data under users account'
                                        });

                                      case 9:
                                        resolve();
                                        return _context.abrupt("return", true);

                                      case 13:
                                        _context.prev = 13;
                                        _context.t0 = _context["catch"](5);

                                        /* istanbul ignore next */
                                        printError('Failed to get permission to save data under users account');
                                        /* istanbul ignore next */

                                        /* istanbul ignore next */
                                        printDebug(JSON.stringify(_context.t0));

                                      case 17:
                                        return _context.abrupt("return", undefined);

                                      case 18:
                                      case "end":
                                        return _context.stop();
                                    }
                                  }
                                }, _callee, null, [[5, 13]]);
                              }));

                              return function (_x3) {
                                return _ref2.apply(this, arguments);
                              };
                            }());
                          } else {
                            /* istanbul ignore next */
                            printHttpError(_context2.t0);
                            /* istanbul ignore next */

                            /* istanbul ignore next */
                            reject(data);
                          }

                        case 14:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, null, [[0, 6]]);
                }));

                return function (_x, _x2) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function create() {
      return _create.apply(this, arguments);
    }

    return create;
  }();

  return PermissionModel;
}(Model);

PermissionModel.request = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(endpoint, quantity, message, params) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            Model.validateMethod('PermissionModel', 'request', [endpoint, quantity, message, params]);
            return _context6.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(resolve) {
                var id, result;
                return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        id = PermissionModel.getPermissionHash(endpoint.split('/')[2], quantity, message);
                        Object.assign(params, {
                          quantity: quantity,
                          message: message,
                          identifier: id,
                          method: ['retrieve', 'update']
                        });
                        _context5.next = 4;
                        return Model.fetch(endpoint, params);

                      case 4:
                        result = _context5.sent;

                        if (result.length === 0) {
                          printDebug("Requesting new access to users data: " + message);
                        } else {
                          printDebug("Found permission notification - returning old result");
                          resolve(result);
                        }

                        printDebug("Waiting for permission to access users data: " + message);
                        openStream.subscribeService('/notification', /*#__PURE__*/function () {
                          var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(event) {
                            var _event$meta_object2;

                            var _notification$0$base2, _notification$0$base3, notification, ids, _result;

                            return _regeneratorRuntime.wrap(function _callee4$(_context4) {
                              while (1) {
                                switch (_context4.prev = _context4.next) {
                                  case 0:
                                    if (!(((_event$meta_object2 = event.meta_object) == null ? void 0 : _event$meta_object2.type) === 'notification')) {
                                      _context4.next = 13;
                                      break;
                                    }

                                    notification = Notification.fromArray([event.data]);
                                    /* istanbul ignore next */

                                    if (!(!notification || !notification[0])) {
                                      _context4.next = 4;
                                      break;
                                    }

                                    return _context4.abrupt("return");

                                  case 4:
                                    ids = notification[0].getIds();

                                    if (!((((_notification$0$base2 = notification[0].base) == null ? void 0 : _notification$0$base2.code) === 1100004 || ((_notification$0$base3 = notification[0].base) == null ? void 0 : _notification$0$base3.code) === 1100013) && ( //notification[0].base?.identifier === id &&
                                    quantity === 'all' || ids.length >= quantity))) {
                                      _context4.next = 13;
                                      break;
                                    }

                                    if (quantity === 'all') {
                                      Object.assign(params, {
                                        id: ids
                                      });
                                    } else {
                                      Object.assign(params, {
                                        id: ids.reverse().slice(0, quantity)
                                      });
                                    }

                                    printDebug("Got permission to " + JSON.stringify(params == null ? void 0 : params.id));
                                    _context4.next = 10;
                                    return Model.fetch(endpoint, params);

                                  case 10:
                                    _result = _context4.sent;
                                    resolve(_result);
                                    return _context4.abrupt("return", true);

                                  case 13:
                                    return _context4.abrupt("return", undefined);

                                  case 14:
                                  case "end":
                                    return _context4.stop();
                                }
                              }
                            }, _callee4);
                          }));

                          return function (_x9) {
                            return _ref5.apply(this, arguments);
                          };
                        }());

                      case 8:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5);
              }));

              return function (_x8) {
                return _ref4.apply(this, arguments);
              };
            }()));

          case 2:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function (_x4, _x5, _x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();

var StreamModel = /*#__PURE__*/function (_PermissionModel) {
  _inheritsLoose(StreamModel, _PermissionModel);

  function StreamModel() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PermissionModel.call.apply(_PermissionModel, [this].concat(args)) || this;
    _this.streamCallback = {
      change: [],
      "delete": [],
      create: []
    };
    return _this;
  }

  var _proto = StreamModel.prototype;

  _proto.onChange = function onChange(callback) {
    Model.validateMethod('Model', 'onChange', arguments);
    openStream.subscribe(this);

    if (!checkList(this.streamCallback.change, callback)) {
      this.streamCallback.change.push(callback);
    }
  };

  _proto.onDelete = function onDelete(callback) {
    Model.validateMethod('Model', 'onDelete', arguments);
    openStream.subscribe(this);

    if (!checkList(this.streamCallback["delete"], callback)) {
      this.streamCallback["delete"].push(callback);
    }
  };

  _proto.onCreate = function onCreate(callback) {
    Model.validateMethod('Model', 'onDelete', arguments);
    openStream.subscribe(this);

    if (this.streamCallback.create.indexOf(callback) === -1) {
      this.streamCallback.create.push(callback);
    }
  };

  _proto.clearAllCallbacks = function clearAllCallbacks() {
    openStream.unsubscribe(this);
    this.streamCallback.change = [];
    this.streamCallback["delete"] = [];
    this.streamCallback.create = [];
  };

  _proto.handleStream = function handleStream(event) {
    var _this2 = this;

    switch (event.event) {
      case 'create':
        this.parseChildren(event.data);
        this.streamCallback.create.forEach(function (cb) {
          cb(_this2);
        });
        break;

      case 'update':
        if (this.parse(event.data)) {
          this.streamCallback.change.forEach(function (cb) {
            cb(_this2);
          });
        }

        break;

      case 'delete':
        this.streamCallback["delete"].forEach(function (cb) {
          cb(_this2);
        });
        break;

      /* istanbul ignore next */

      default:
        printError('Unhandled stream event type: ' + event.event);
        break;
    }
  };

  return StreamModel;
}(PermissionModel);

var State = /*#__PURE__*/function (_StreamModel) {
  _inheritsLoose(State, _StreamModel);

  function State(type) {
    var _this;

    _this = _StreamModel.call(this, 'state') || this;
    _this.data = '';
    _this.status = void 0;
    _this.type = 'Report';
    _this.timestamp = new Date().toISOString();
    _this.status_payment = void 0;
    Model.validateMethod('State', 'constructor', arguments);
    _this.type = type || 'Report';
    return _this;
  }

  var _proto = State.prototype;

  _proto.attributes = function attributes() {
    return ['data', 'type', 'timestamp'];
  };

  return State;
}(StreamModel);
State.endpoint = '/2.0/state';
State.fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
  var params, url, data;
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          params = {
            expand: 1
          };
          url = State.endpoint;
          _context.next = 4;
          return Model.fetch(url, params);

        case 4:
          data = _context.sent;
          return _context.abrupt("return", State.fromArray(data));

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

var EventLog = /*#__PURE__*/function (_Model) {
  _inheritsLoose(EventLog, _Model);

  function EventLog() {
    var _this;

    _this = _Model.call(this, 'eventlog') || this;
    _this.message = '';
    _this.level = 'info';
    _this.info = void 0;
    _this.type = void 0;
    _this.timestamp = void 0;
    return _this;
  }

  var _proto = EventLog.prototype;

  _proto.attributes = function attributes() {
    return ['message', 'level', 'info', 'type'];
  };

  return EventLog;
}(Model);
EventLog.endpoint = '/2.0/eventlog';

var Value = /*#__PURE__*/function (_StreamModel) {
  _inheritsLoose(Value, _StreamModel);

  function Value(name) {
    var _this;

    _this = _StreamModel.call(this, 'value') || this;
    _this.name = void 0;
    _this.description = void 0;
    _this.permission = 'r';
    _this.tmp_permission = 'r';
    _this.type = '';
    _this.period = void 0;
    _this.last_period = '';
    _this.delta = void 0;
    _this.number = void 0;
    _this.string = void 0;
    _this.blob = void 0;
    _this.xml = void 0;
    _this.status = void 0;
    _this.state = [];
    _this.eventlog = [];
    _this.stateCallbacks = {
      Control: [],
      Report: []
    };
    _this.reportIsForced = false;
    _this.sendReportWithJitter = false;
    _this.periodTimer = void 0;
    _this.refreshCallbacks = [];
    _this.jitterTimer = void 0;
    Model.validateMethod('Value', 'constructor', arguments);
    _this.name = name || '';
    return _this;
  }

  var _proto = Value.prototype;

  _proto.attributes = function attributes() {
    return ['name', 'permission', 'type', 'period', 'delta', 'number', 'string', 'blob', 'xml', 'status'];
  };

  _proto.created = function created() {
    var _this2 = this;

    this.onChange(function (val) {
      _this2.handlePeriodUpdate();
    });
    this.handlePeriodUpdate();
  };

  _proto.perserve = function perserve() {
    this.tmp_permission = this.permission;
  };

  _proto.restore = function restore() {
    this.permission = this.tmp_permission;
  };

  _proto.setParent = function setParent(parent) {
    var _this3 = this;

    _StreamModel.prototype.setParent.call(this, parent);

    this.state.forEach(function (state) {
      if (typeof state !== 'string') {
        state.parent = _this3;
      }
    });
  };

  _proto.loadAllChildren = /*#__PURE__*/function () {
    var _loadAllChildren = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var i, id;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              i = 0;

            case 1:
              if (!(i < this.state.length)) {
                _context.next = 12;
                break;
              }

              if (!(typeof this.state[i] === 'string')) {
                _context.next = 9;
                break;
              }

              id = this.state[i];
              this.state[i] = new State();
              this.state[i].meta.id = id;
              this.state[i].parent = this;
              _context.next = 9;
              return this.state[i].reload();

            case 9:
              i++;
              _context.next = 1;
              break;

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function loadAllChildren() {
      return _loadAllChildren.apply(this, arguments);
    }

    return loadAllChildren;
  }();

  _proto.findState = function findState(type) {
    var res = undefined;
    this.state.forEach(function (state) {
      if (state.type === type) {
        res = state;
      }
    });
    return res;
  };

  _proto.getTime = function getTime() {
    return new Date().toISOString();
  };

  _proto.findStateAndUpdate = /*#__PURE__*/function () {
    var _findStateAndUpdate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(type, data, timestamp) {
      var _this4 = this;

      var state, eventTimestamp, timeout, oldData, oldTimestamp, p;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              state = this.findState(type);

              if (!state) {
                _context2.next = 23;
                break;
              }

              state.data = data.toString();
              state.timestamp = timestamp || this.getTime();

              if (!(this.sendReportWithJitter && type === 'Report')) {
                _context2.next = 21;
                break;
              }

              this.sendReportWithJitter = false;
              eventTimestamp = state.timestamp;
              timeout = randomIntFromInterval(_config.jitterMin, _config.jitterMax);
              _context2.next = 10;
              return new Promise(function (r) {
                _this4.jitterTimer = setTimeout(r, timeout * 1000);
              });

            case 10:
              oldData = state.data;
              oldTimestamp = state.timestamp;
              state.data = data.toString();
              state.timestamp = eventTimestamp;
              p = state.update();
              state.data = oldData;
              state.timestamp = oldTimestamp;
              _context2.next = 19;
              return p;

            case 19:
              _context2.next = 23;
              break;

            case 21:
              _context2.next = 23;
              return state.update();

            case 23:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function findStateAndUpdate(_x, _x2, _x3) {
      return _findStateAndUpdate.apply(this, arguments);
    }

    return findStateAndUpdate;
  }();

  _proto.findStateAndCallback = function findStateAndCallback(type, callback) {
    var _this5 = this;

    if (!checkList(this.stateCallbacks[type], callback)) {
      this.stateCallbacks[type].push(callback);
      var state = this.findState(type);

      if (state) {
        state.onChange(function () {
          _this5.stateCallbacks[state.type].forEach(function (c) {
            c(_this5, state.data, state.timestamp);
          });
        });
      }
    }
  };

  _proto.findStateAndClear = function findStateAndClear(type) {
    this.stateCallbacks[type] = [];
    var state = this.findState(type);

    if (state) {
      state.clearAllCallbacks();
    }
  };

  _proto.addEvent = /*#__PURE__*/function () {
    var _addEvent = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(level, message, info) {
      var event,
          _args3 = arguments;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this.validate('addEvent', _args3);
              event = new EventLog();
              event.level = level;
              event.message = message;
              event.info = info;
              event.parent = this;
              _context3.next = 8;
              return event.create();

            case 8:
              this.eventlog.push(event);
              return _context3.abrupt("return", event);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function addEvent(_x4, _x5, _x6) {
      return _addEvent.apply(this, arguments);
    }

    return addEvent;
  }();

  _proto.createState = /*#__PURE__*/function () {
    var _createState = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params) {
      var create,
          state,
          oldJson,
          newJson,
          _args4 = arguments;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.validate('createState', _args4);
              create = false;
              state = this.findState(params.type);

              if (!state) {
                state = new State(params.type);
                create = true;
              } else {
                printDebug("Using existing state with id " + state.id());
              }

              oldJson = state.toJSON();
              state.parse(params);
              newJson = state.toJSON();
              state.parent = this;

              if (!(create || !isEqual(oldJson, newJson))) {
                _context4.next = 17;
                break;
              }

              if (!create) {
                _context4.next = 15;
                break;
              }

              _context4.next = 12;
              return state.create();

            case 12:
              this.state.push(state);
              _context4.next = 17;
              break;

            case 15:
              _context4.next = 17;
              return state.update();

            case 17:
              return _context4.abrupt("return", state);

            case 18:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function createState(_x7) {
      return _createState.apply(this, arguments);
    }

    return createState;
  }();

  _proto.parseChildren = function parseChildren(json) {
    var res = false;
    var states = State.fromArray([json]);

    if (states.length) {
      this.state.push(states[0]);
      res = true;
    }

    return res;
  };

  _proto.findStateAndData = function findStateAndData(type) {
    var state = this.findState(type);

    if (state) {
      return state.data;
    }

    return undefined;
  };

  _proto.findStateAndTimestamp = function findStateAndTimestamp(type) {
    var state = this.findState(type);

    if (state) {
      return state.timestamp;
    }

    return undefined;
  };

  _proto.getReportData = function getReportData() {
    return this.findStateAndData('Report');
  };

  _proto.getControlData = function getControlData() {
    return this.findStateAndData('Control');
  };

  _proto.getControlTimestamp = function getControlTimestamp() {
    return this.findStateAndTimestamp('Control');
  };

  _proto.getReportTimestamp = function getReportTimestamp() {
    return this.findStateAndTimestamp('Report');
  };

  _proto.report = /*#__PURE__*/function () {
    var _report = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data, timestamp) {
      var _args5 = arguments;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (timestamp === void 0) {
                timestamp = undefined;
              }

              this.validate('report', _args5);
              return _context5.abrupt("return", this.sendReport(data, timestamp, false));

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function report(_x8, _x9) {
      return _report.apply(this, arguments);
    }

    return report;
  }();

  _proto.forceReport = /*#__PURE__*/function () {
    var _forceReport = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(data, timestamp) {
      var _args6 = arguments;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (timestamp === void 0) {
                timestamp = undefined;
              }

              this.validate('forceReport', _args6);
              return _context6.abrupt("return", this.sendReport(data, timestamp, true));

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function forceReport(_x10, _x11) {
      return _forceReport.apply(this, arguments);
    }

    return forceReport;
  }();

  _proto.sendReport = /*#__PURE__*/function () {
    var _sendReport = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(data, timestamp, force) {
      var oldState, oldData, newData, delta, diff;
      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (timestamp === void 0) {
                timestamp = undefined;
              }

              if (!(this.delta && this.delta !== '' && this.delta !== '0' && !this.reportIsForced && !force)) {
                _context7.next = 15;
                break;
              }

              if (!(this.delta.toLowerCase() === 'inf')) {
                _context7.next = 5;
                break;
              }

              printDebug("Dropping value update for \"" + this.name + "\" because delta is Inf");
              return _context7.abrupt("return");

            case 5:
              oldState = this.findState('Report');

              if (oldState) {
                _context7.next = 8;
                break;
              }

              return _context7.abrupt("return");

            case 8:
              oldData = parseFloat(oldState.data);

              if (typeof data === 'string') {
                newData = parseFloat(data);
              } else {
                newData = data;
              }

              delta = Math.abs(parseFloat(this.delta));
              diff = Math.abs(oldData - newData);

              if (!(diff < delta)) {
                _context7.next = 15;
                break;
              }

              printDebug("Dropping value update for \"" + this.name + "\" because the change is less then " + delta);
              return _context7.abrupt("return");

            case 15:
              this.reportIsForced = false;
              _context7.next = 18;
              return this.findStateAndUpdate('Report', data, timestamp);

            case 18:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function sendReport(_x12, _x13, _x14) {
      return _sendReport.apply(this, arguments);
    }

    return sendReport;
  }();

  _proto.control = /*#__PURE__*/function () {
    var _control = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(data, timestamp) {
      var _args8 = arguments;
      return _regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (timestamp === void 0) {
                timestamp = undefined;
              }

              this.validate('control', _args8);
              this.findStateAndUpdate('Control', data, timestamp);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function control(_x15, _x16) {
      return _control.apply(this, arguments);
    }

    return control;
  }();

  _proto.onControl = function onControl(callback) {
    this.validate('onControl', arguments);
    this.findStateAndCallback('Control', callback);
  };

  _proto.onReport = function onReport(callback) {
    this.validate('onReport', arguments);
    this.findStateAndCallback('Report', callback);
  };

  _proto.onRefresh = function onRefresh(callback) {
    var _this6 = this;

    this.validate('onRefresh', arguments);
    this.status = '';
    this.refreshCallbacks.push(callback);
    this.onChange(function () {
      if (_this6.status === 'update') {
        _this6.reportIsForced = true;
        _this6.status = '';
        callback(_this6, 'user');
      }
    });
  };

  _proto.cancelOnReport = function cancelOnReport() {
    this.findStateAndClear('Report');
  };

  _proto.cancelOnControl = function cancelOnControl() {
    this.findStateAndClear('Control');
  };

  _proto.cancelOnRefresh = function cancelOnRefresh() {
    this.refreshCallbacks = [];
    this.clearAllCallbacks();
  };

  _proto.changeAttribute = /*#__PURE__*/function () {
    var _changeAttribute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(key, value) {
      var data;
      return _regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.prev = 0;
              data = {};
              data[key] = value;
              _context9.next = 5;
              return wappsto.patch(this.getUrl(), data, Model.generateOptions());

            case 5:
              _context9.next = 10;
              break;

            case 7:
              _context9.prev = 7;
              _context9.t0 = _context9["catch"](0);

              /* istanbul ignore next */
              printHttpError(_context9.t0);

            case 10:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[0, 7]]);
    }));

    function changeAttribute(_x17, _x18) {
      return _changeAttribute.apply(this, arguments);
    }

    return changeAttribute;
  }();

  _proto.refresh = /*#__PURE__*/function () {
    var _refresh = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
      return _regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", this.changeAttribute('status', 'update'));

            case 1:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function refresh() {
      return _refresh.apply(this, arguments);
    }

    return refresh;
  }();

  _proto.setPeriod = /*#__PURE__*/function () {
    var _setPeriod = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(period) {
      return _regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", this.changeAttribute('period', period));

            case 1:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function setPeriod(_x19) {
      return _setPeriod.apply(this, arguments);
    }

    return setPeriod;
  }();

  _proto.setDelta = /*#__PURE__*/function () {
    var _setDelta = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(delta) {
      return _regeneratorRuntime.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              return _context12.abrupt("return", this.changeAttribute('delta', delta.toString()));

            case 1:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function setDelta(_x20) {
      return _setDelta.apply(this, arguments);
    }

    return setDelta;
  }();

  _proto.findStateAndLog = /*#__PURE__*/function () {
    var _findStateAndLog = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(type, request) {
      var state, response;
      return _regeneratorRuntime.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              state = this.findState(type);

              if (!state) {
                _context13.next = 6;
                break;
              }

              _context13.next = 4;
              return Model.fetch("/2.1/log/" + state.id() + "/state", request);

            case 4:
              response = _context13.sent;
              return _context13.abrupt("return", response[0]);

            case 6:
              return _context13.abrupt("return", {
                meta: {
                  id: '',
                  type: 'log',
                  version: '2.1'
                },
                data: [],
                more: false,
                type: 'state'
              });

            case 7:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function findStateAndLog(_x21, _x22) {
      return _findStateAndLog.apply(this, arguments);
    }

    return findStateAndLog;
  }();

  _proto.getReportLog = /*#__PURE__*/function () {
    var _getReportLog = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request) {
      var _args14 = arguments;
      return _regeneratorRuntime.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              this.validate('getReportLog', _args14);
              return _context14.abrupt("return", this.findStateAndLog('Report', request));

            case 2:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function getReportLog(_x23) {
      return _getReportLog.apply(this, arguments);
    }

    return getReportLog;
  }();

  _proto.getControlLog = /*#__PURE__*/function () {
    var _getControlLog = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(request) {
      var _args15 = arguments;
      return _regeneratorRuntime.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              this.validate('getControlLog', _args15);
              return _context15.abrupt("return", this.findStateAndLog('Control', request));

            case 2:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function getControlLog(_x24) {
      return _getControlLog.apply(this, arguments);
    }

    return getControlLog;
  }();

  Value.validate = function validate(name, params) {
    Model.validateMethod('Value', name, params);
  };

  _proto.handlePeriodUpdate = function handlePeriodUpdate() {
    if (this.period && this.period !== this.last_period) {
      this.last_period = this.period;
      this.startPeriodHandler();
    }
  };

  _proto.getPeriodTimeout = function getPeriodTimeout() {
    var timeout = 0;

    if (isPositiveInteger(this.last_period)) {
      timeout = parseInt(this.last_period);
    } else {
      timeout = parseDuration(this.last_period, 's');
    }

    if (timeout) {
      return getSecondsToNextPeriod(timeout) * 1000;
    }

    return 0;
  };

  _proto.startPeriodHandler = function startPeriodHandler() {
    var _this7 = this;

    clearTimeout(this.periodTimer);

    if (this.getPeriodTimeout() === 0) {
      return;
    }

    this.periodTimer = setTimeout(function () {
      _this7.triggerPeriodUpdate();
    }, this.getPeriodTimeout());
  };

  _proto.triggerPeriodUpdate = function triggerPeriodUpdate() {
    var _this8 = this;

    this.refreshCallbacks.forEach(function (cb) {
      _this8.sendReportWithJitter = true;
      _this8.reportIsForced = true;
      cb(_this8, 'period');
    });
    this.periodTimer = setTimeout(function () {
      _this8.triggerPeriodUpdate();
    }, this.getPeriodTimeout());
  };

  _proto.cancelPeriod = function cancelPeriod() {
    clearTimeout(this.periodTimer);
    clearTimeout(this.jitterTimer);
  };

  _createClass(Value, [{
    key: "states",
    get: function get() {
      return this.state;
    }
  }]);

  return Value;
}(StreamModel);
Value.endpoint = '/2.0/value';
Value.fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
  var params, url, data;
  return _regeneratorRuntime.wrap(function _callee16$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          params = {
            expand: 2
          };
          url = Value.endpoint;
          _context16.next = 4;
          return Model.fetch(url, params);

        case 4:
          data = _context16.sent;
          return _context16.abrupt("return", Value.fromArray(data));

        case 6:
        case "end":
          return _context16.stop();
      }
    }
  }, _callee16);
}));

Value.find = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(params, quantity, usage) {
    var query, key, data;
    return _regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            if (quantity === void 0) {
              quantity = 1;
            }

            if (usage === void 0) {
              usage = '';
            }

            Value.validate('find', [params, quantity, usage]);

            if (usage === '') {
              usage = "Find " + quantity + " value";
            }

            query = {
              expand: 2
            };

            for (key in params) {
              query["this_" + key] = "=" + params[key];
            }

            _context17.next = 8;
            return PermissionModel.request(Value.endpoint, quantity, usage, query);

          case 8:
            data = _context17.sent;
            return _context17.abrupt("return", Value.fromArray(data));

          case 10:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));

  return function (_x25, _x26, _x27) {
    return _ref2.apply(this, arguments);
  };
}();

Value.findByName = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(name, quantity, usage) {
    return _regeneratorRuntime.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            if (quantity === void 0) {
              quantity = 1;
            }

            if (usage === void 0) {
              usage = '';
            }

            Value.validate('findByName', [name, quantity, usage]);

            if (usage === '') {
              usage = "Find " + quantity + " value with name " + name;
            }

            return _context18.abrupt("return", Value.find({
              name: name
            }, quantity, usage));

          case 5:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));

  return function (_x28, _x29, _x30) {
    return _ref3.apply(this, arguments);
  };
}();

Value.findByType = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(type, quantity, usage) {
    return _regeneratorRuntime.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            if (quantity === void 0) {
              quantity = 1;
            }

            if (usage === void 0) {
              usage = '';
            }

            Value.validate('findByType', [type, quantity, usage]);

            if (usage === '') {
              usage = "Find " + quantity + " value with type " + type;
            }

            return _context19.abrupt("return", Value.find({
              type: type
            }, quantity, usage));

          case 5:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));

  return function (_x31, _x32, _x33) {
    return _ref4.apply(this, arguments);
  };
}();

Value.findAllByName = /*#__PURE__*/function () {
  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(name, usage) {
    return _regeneratorRuntime.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            if (usage === void 0) {
              usage = '';
            }

            Value.validate('findAllByName', [name, usage]);
            return _context20.abrupt("return", Value.findByName(name, 'all', usage));

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));

  return function (_x34, _x35) {
    return _ref5.apply(this, arguments);
  };
}();

Value.findAllByType = /*#__PURE__*/function () {
  var _ref6 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(type, usage) {
    return _regeneratorRuntime.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            if (usage === void 0) {
              usage = '';
            }

            Value.validate('findAllByType', [type, usage]);
            return _context21.abrupt("return", Value.findByType(type, 'all', usage));

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));

  return function (_x36, _x37) {
    return _ref6.apply(this, arguments);
  };
}();

Value.findById = /*#__PURE__*/function () {
  var _ref7 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(id) {
    var res;
    return _regeneratorRuntime.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            Value.validate('findById', [id]);
            _context22.next = 3;
            return Model.fetch(Value.endpoint + "/" + id, {
              expand: 2
            });

          case 3:
            res = _context22.sent;
            return _context22.abrupt("return", Value.fromArray(res)[0]);

          case 5:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));

  return function (_x38) {
    return _ref7.apply(this, arguments);
  };
}();

__decorate([Type(function () {
  return State;
})], Value.prototype, "state", void 0);

__decorate([Type(function () {
  return EventLog;
})], Value.prototype, "eventlog", void 0);

var Device = /*#__PURE__*/function (_StreamModel) {
  _inheritsLoose(Device, _StreamModel);

  function Device(name) {
    var _this;

    _this = _StreamModel.call(this, 'device') || this;
    _this.name = void 0;
    _this.product = void 0;
    _this.serial = void 0;
    _this.description = void 0;
    _this.protocol = void 0;
    _this.communication = void 0;
    _this.version = void 0;
    _this.manufacturer = void 0;
    _this.value = [];
    Model.validateMethod('Device', 'constructor', arguments);
    _this.name = name || '';
    return _this;
  }

  var _proto = Device.prototype;

  _proto.attributes = function attributes() {
    return ['name', 'product', 'serial', 'description', 'protocol', 'communication', 'version', 'manufacturer'];
  };

  _proto.findValueByName = function findValueByName(name) {
    this.validate('findValueByName', arguments);
    return this.value.filter(function (val) {
      return val.name === name;
    });
  };

  _proto.findValueByType = function findValueByType(type) {
    this.validate('findValueByType', arguments);
    return this.value.filter(function (val) {
      return val.type === type;
    });
  };

  _proto.loadAllChildren = /*#__PURE__*/function () {
    var _loadAllChildren = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var i, id;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              i = 0;

            case 1:
              if (!(i < this.value.length)) {
                _context.next = 13;
                break;
              }

              if (!(typeof this.value[i] === 'string')) {
                _context.next = 8;
                break;
              }

              id = this.value[i];
              _context.next = 6;
              return Value.findById(id);

            case 6:
              this.value[i] = _context.sent;
              this.value[i].parent = this;

            case 8:
              _context.next = 10;
              return this.value[i].loadAllChildren();

            case 10:
              i++;
              _context.next = 1;
              break;

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function loadAllChildren() {
      return _loadAllChildren.apply(this, arguments);
    }

    return loadAllChildren;
  }();

  _proto._createValue = /*#__PURE__*/function () {
    var _createValue2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
      var oldDelta, oldPeriod, value, values, oldJson, newJson;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              oldPeriod = '0';
              value = new Value();
              values = this.findValueByName(params.name);

              if (values.length !== 0) {
                printDebug("Using existing value with id " + values[0].id());
                value = values[0];
                oldDelta = params.delta;
                params.delta = value.delta;

                if (params.period) {
                  oldPeriod = params.period;
                }

                params.period = value.period;
              }

              oldJson = value.toJSON();
              value.parse(params);
              newJson = value.toJSON();

              if (value.delta === undefined) {
                value.delta = oldDelta;
              }

              if (value.period === undefined) {
                value.period = oldPeriod;
              }

              value.parent = this;

              if (isEqual(oldJson, newJson)) {
                _context2.next = 14;
                break;
              }

              _context2.next = 13;
              return value.create();

            case 13:
              if (values.length === 0) {
                this.value.push(value);
              }

            case 14:
              if (!['r', 'rw', 'wr'].includes(params.permission)) {
                _context2.next = 17;
                break;
              }

              _context2.next = 17;
              return value.createState({
                type: 'Report'
              });

            case 17:
              if (!['w', 'rw', 'wr'].includes(params.permission)) {
                _context2.next = 20;
                break;
              }

              _context2.next = 20;
              return value.createState({
                type: 'Control'
              });

            case 20:
              value.created();
              return _context2.abrupt("return", value);

            case 22:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function _createValue(_x) {
      return _createValue2.apply(this, arguments);
    }

    return _createValue;
  }();

  _proto.createValue = /*#__PURE__*/function () {
    var _createValue3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name, permission, valueTemplate, period, delta) {
      var _args3 = arguments;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (period === void 0) {
                period = '0';
              }

              if (delta === void 0) {
                delta = 0;
              }

              this.validate('createValue', _args3);
              valueTemplate.name = name;
              valueTemplate.permission = permission;
              valueTemplate.period = period;
              valueTemplate.delta = delta.toString();
              _context3.next = 9;
              return this._createValue(valueTemplate);

            case 9:
              return _context3.abrupt("return", _context3.sent);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function createValue(_x2, _x3, _x4, _x5, _x6) {
      return _createValue3.apply(this, arguments);
    }

    return createValue;
  }();

  _proto.getValueBase = function getValueBase(params) {
    return {
      name: params.name,
      permission: params.permission,
      type: params.type,
      description: params.description,
      period: params.period,
      delta: params.delta
    };
  };

  _proto.createNumberValue = /*#__PURE__*/function () {
    var _createNumberValue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params) {
      var _params$delta;

      var base,
          _args4 = arguments;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.validate('createNumberValue', _args4);
              base = this.getValueBase(params);
              base.delta = (_params$delta = params.delta) != null ? _params$delta : '0';
              _context4.next = 5;
              return this._createValue(_extends({}, base, {
                number: {
                  min: params.min,
                  max: params.max,
                  step: params.step,
                  unit: params.unit,
                  si_conversion: params.si_conversion,
                  mapping: params.mapping,
                  ordered_mapping: params.ordered_mapping,
                  meaningful_zero: params.meaningful_zero
                }
              }));

            case 5:
              return _context4.abrupt("return", _context4.sent);

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function createNumberValue(_x7) {
      return _createNumberValue.apply(this, arguments);
    }

    return createNumberValue;
  }();

  _proto.createStringValue = /*#__PURE__*/function () {
    var _createStringValue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(params) {
      var base,
          _args5 = arguments;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              this.validate('createStringValue', _args5);
              base = this.getValueBase(params);
              _context5.next = 4;
              return this._createValue(_extends({}, base, {
                string: {
                  max: params.max,
                  encoding: params.encoding
                }
              }));

            case 4:
              return _context5.abrupt("return", _context5.sent);

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function createStringValue(_x8) {
      return _createStringValue.apply(this, arguments);
    }

    return createStringValue;
  }();

  _proto.createBlobValue = /*#__PURE__*/function () {
    var _createBlobValue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(params) {
      var base,
          _args6 = arguments;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              this.validate('createBlobValue', _args6);
              base = this.getValueBase(params);
              _context6.next = 4;
              return this._createValue(_extends({}, base, {
                blob: {
                  max: params.max,
                  encoding: params.encoding
                }
              }));

            case 4:
              return _context6.abrupt("return", _context6.sent);

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function createBlobValue(_x9) {
      return _createBlobValue.apply(this, arguments);
    }

    return createBlobValue;
  }();

  _proto.createXmlValue = /*#__PURE__*/function () {
    var _createXmlValue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(params) {
      var base,
          _args7 = arguments;
      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              this.validate('createXmlValue', _args7);
              base = this.getValueBase(params);
              _context7.next = 4;
              return this._createValue(_extends({}, base, {
                xml: {
                  xsd: params.xsd,
                  namespace: params.namespace
                }
              }));

            case 4:
              return _context7.abrupt("return", _context7.sent);

            case 5:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function createXmlValue(_x10) {
      return _createXmlValue.apply(this, arguments);
    }

    return createXmlValue;
  }();

  _proto.parseChildren = function parseChildren(json) {
    var res = false;
    var values = Value.fromArray([json]);

    if (values.length) {
      this.value.push(values[0]);
      res = true;
    }

    return res;
  };

  _proto.removeChild = function removeChild(child) {
    this.value = this.value.filter(function (value) {
      return child !== value;
    });
  };

  _proto.setParent = function setParent(parent) {
    var _this2 = this;

    _StreamModel.prototype.setParent.call(this, parent);

    this.value.forEach(function (val) {
      if (typeof val !== 'string') {
        val.setParent(_this2);
      }
    });
  };

  Device.validate = function validate(name, params) {
    Model.validateMethod('Device', name, params);
  };

  _createClass(Device, [{
    key: "values",
    get: function get() {
      return this.value;
    }
  }]);

  return Device;
}(StreamModel);
Device.endpoint = '/2.0/device';

Device.find = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(params, quantity, usage) {
    var query, key, data;
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (quantity === void 0) {
              quantity = 1;
            }

            if (usage === void 0) {
              usage = '';
            }

            Device.validate('find', [params, quantity, usage]);

            if (usage === '') {
              usage = "Find " + quantity + " device";
            }

            query = {
              expand: 3
            };

            for (key in params) {
              query["this_" + key] = "=" + params[key];
            }

            _context8.next = 8;
            return PermissionModel.request(Device.endpoint, quantity, usage, query);

          case 8:
            data = _context8.sent;
            return _context8.abrupt("return", Device.fromArray(data));

          case 10:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function (_x11, _x12, _x13) {
    return _ref.apply(this, arguments);
  };
}();

Device.findByName = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(name, quantity, usage) {
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (quantity === void 0) {
              quantity = 1;
            }

            if (usage === void 0) {
              usage = '';
            }

            Device.validate('findByName', [name, quantity, usage]);

            if (usage === '') {
              usage = "Find " + quantity + " device with name " + name;
            }

            return _context9.abrupt("return", Device.find({
              name: name
            }, quantity, usage));

          case 5:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function (_x14, _x15, _x16) {
    return _ref2.apply(this, arguments);
  };
}();

Device.findAllByName = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(name, usage) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (usage === void 0) {
              usage = '';
            }

            Device.validate('findAllByName', [name, usage]);
            return _context10.abrupt("return", Device.findByName(name, 'all', usage));

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function (_x17, _x18) {
    return _ref3.apply(this, arguments);
  };
}();

Device.findByProduct = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(product, quantity, usage) {
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (quantity === void 0) {
              quantity = 1;
            }

            if (usage === void 0) {
              usage = '';
            }

            Device.validate('findByProduct', [product, quantity, usage]);

            if (usage === '') {
              usage = "Find " + quantity + " device with product " + product;
            }

            return _context11.abrupt("return", Device.find({
              product: product
            }, quantity, usage));

          case 5:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function (_x19, _x20, _x21) {
    return _ref4.apply(this, arguments);
  };
}();

Device.findAllByProduct = /*#__PURE__*/function () {
  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(product, usage) {
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (usage === void 0) {
              usage = '';
            }

            Device.validate('findAllByProduct', [product, usage]);
            return _context12.abrupt("return", Device.findByProduct(product, 'all', usage));

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function (_x22, _x23) {
    return _ref5.apply(this, arguments);
  };
}();

Device.findById = /*#__PURE__*/function () {
  var _ref6 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(id) {
    var res;
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            Device.validate('findById', [id]);
            _context13.next = 3;
            return Model.fetch(Device.endpoint + "/" + id, {
              expand: 3
            });

          case 3:
            res = _context13.sent;
            return _context13.abrupt("return", Device.fromArray(res)[0]);

          case 5:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function (_x24) {
    return _ref6.apply(this, arguments);
  };
}();

Device.fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
  var params, url, data, res, i;
  return _regeneratorRuntime.wrap(function _callee14$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          params = {
            expand: 3
          };
          url = Device.endpoint;
          _context14.next = 4;
          return Model.fetch(url, params);

        case 4:
          data = _context14.sent;
          res = Device.fromArray(data);
          i = 0;

        case 7:
          if (!(i < res.length)) {
            _context14.next = 13;
            break;
          }

          _context14.next = 10;
          return res[i].loadAllChildren();

        case 10:
          i++;
          _context14.next = 7;
          break;

        case 13:
          return _context14.abrupt("return", res);

        case 14:
        case "end":
          return _context14.stop();
      }
    }
  }, _callee14);
}));

__decorate([Type(function () {
  return Value;
})], Device.prototype, "value", void 0);

function createNetwork(_x) {
  return _createNetwork.apply(this, arguments);
}

function _createNetwork() {
  _createNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {
    var networks,
        network,
        _args3 = arguments;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            Model.validateMethod('Network', 'createNetwork', _args3);
            _context3.next = 3;
            return Network.fetch(params.name);

          case 3:
            networks = _context3.sent;

            if (!(networks.length !== 0)) {
              _context3.next = 7;
              break;
            }

            printDebug("Using existing network with id " + networks[0].id());
            return _context3.abrupt("return", networks[0]);

          case 7:
            network = new Network();
            network.name = params.name;
            network.description = params.description;
            _context3.next = 12;
            return network.create();

          case 12:
            return _context3.abrupt("return", network);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _createNetwork.apply(this, arguments);
}

var Network = /*#__PURE__*/function (_StreamModel) {
  _inheritsLoose(Network, _StreamModel);

  function Network(name) {
    var _this;

    _this = _StreamModel.call(this, 'network') || this;
    _this.name = void 0;
    _this.description = void 0;
    _this.device = [];
    Model.validateMethod('Network', 'constructor', arguments);
    _this.name = name || '';
    return _this;
  }

  var _proto = Network.prototype;

  _proto.attributes = function attributes() {
    return ['name', 'description'];
  };

  _proto.findDeviceByName = function findDeviceByName(name) {
    this.validate('findDeviceByName', arguments);
    return this.device.filter(function (dev) {
      return dev.name === name;
    });
  };

  _proto.findDeviceByProduct = function findDeviceByProduct(product) {
    this.validate('findDeviceByProduct', arguments);
    return this.device.filter(function (dev) {
      return dev.product === product;
    });
  };

  _proto.findValueByName = function findValueByName(name) {
    this.validate('findValueByName', arguments);
    var values = [];
    this.device.forEach(function (dev) {
      values = values.concat(dev.findValueByName(name));
    });
    return values;
  };

  _proto.findValueByType = function findValueByType(type) {
    this.validate('findValueByType', arguments);
    var values = [];
    this.device.forEach(function (dev) {
      values = values.concat(dev.findValueByType(type));
    });
    return values;
  };

  _proto.loadAllChildren = /*#__PURE__*/function () {
    var _loadAllChildren = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var i, id;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              i = 0;

            case 1:
              if (!(i < this.device.length)) {
                _context.next = 20;
                break;
              }

              if (!(typeof this.device[i] === 'string')) {
                _context.next = 9;
                break;
              }

              id = this.device[i];
              _context.next = 6;
              return Device.findById(id);

            case 6:
              this.device[i] = _context.sent;
              _context.next = 13;
              break;

            case 9:
              if (!(i >= 3)) {
                _context.next = 13;
                break;
              }

              _context.next = 12;
              return Device.findById(
              /* istanbul ignore next */
              this.device[i].meta.id || '');

            case 12:
              this.device[i] = _context.sent;

            case 13:
              if (!this.device[i]) {
                _context.next = 17;
                break;
              }

              this.device[i].parent = this;
              _context.next = 17;
              return this.device[i].loadAllChildren();

            case 17:
              i++;
              _context.next = 1;
              break;

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function loadAllChildren() {
      return _loadAllChildren.apply(this, arguments);
    }

    return loadAllChildren;
  }();

  _proto.createDevice = /*#__PURE__*/function () {
    var _createDevice = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
      var device,
          devices,
          _devices$,
          oldJson,
          newJson,
          _args2 = arguments;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.validate('createDevice', _args2);
              device = new Device();
              devices = this.findDeviceByName(params.name);

              if (devices.length !== 0) {
                /* istanbul ignore next */
                printDebug("Using existing device with id " + ((_devices$ = devices[0]) == null ? void 0 : _devices$.id()));
                device = devices[0];
              }

              oldJson = device.toJSON();
              device.parse(params);
              newJson = device.toJSON();
              device.parent = this;

              if (isEqual(oldJson, newJson)) {
                _context2.next = 17;
                break;
              }

              if (!(devices.length !== 0)) {
                _context2.next = 14;
                break;
              }

              _context2.next = 12;
              return device.update();

            case 12:
              _context2.next = 17;
              break;

            case 14:
              _context2.next = 16;
              return device.create();

            case 16:
              this.device.push(device);

            case 17:
              return _context2.abrupt("return", device);

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function createDevice(_x2) {
      return _createDevice.apply(this, arguments);
    }

    return createDevice;
  }();

  _proto.parseChildren = function parseChildren(json) {
    var res = false;
    var devices = Device.fromArray([json]);

    if (devices.length) {
      this.device.push(devices[0]);
      res = true;
    }

    return res;
  };

  _proto.removeChild = function removeChild(child) {
    this.device = this.device.filter(function (device) {
      return child !== device;
    });
  };

  _proto.setParent = function setParent(parent) {
    var _this2 = this;

    this.parent = parent;
    this.device.forEach(function (dev) {
      if (typeof dev !== 'string') {
        dev.setParent(_this2);
      }
    });
  };

  Network.validate = function validate(name, params) {
    Model.validateMethod('Network', name, params);
  };

  _createClass(Network, [{
    key: "devices",
    get: function get() {
      return this.device;
    }
  }]);

  return Network;
}(StreamModel);
Network.endpoint = '/2.0/network';

Network.find = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params, quantity, usage) {
    var query, key, data;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (quantity === void 0) {
              quantity = 1;
            }

            if (usage === void 0) {
              usage = '';
            }

            Network.validate('find', [params, quantity, usage]);

            if (usage === '') {
              usage = "Find " + quantity + " network";
            }

            query = {
              expand: 4
            };

            for (key in params) {
              query["this_" + key] = "=" + params[key];
            }

            _context4.next = 8;
            return PermissionModel.request(Network.endpoint, quantity, usage, query);

          case 8:
            data = _context4.sent;
            return _context4.abrupt("return", Network.fromArray(data));

          case 10:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function (_x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();

Network.findByName = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name, quantity, usage) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (quantity === void 0) {
              quantity = 1;
            }

            if (usage === void 0) {
              usage = '';
            }

            Network.validate('findByName', [name, quantity, usage]);

            if (usage === '') {
              usage = "Find " + quantity + " network with name " + name;
            }

            return _context5.abrupt("return", Network.find({
              name: name
            }, quantity, usage));

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function (_x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();

Network.findAllByName = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(name, usage) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (usage === void 0) {
              usage = '';
            }

            Network.validate('findAllByName', [name, usage]);
            return _context6.abrupt("return", Network.findByName(name, 'all', usage));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function (_x9, _x10) {
    return _ref3.apply(this, arguments);
  };
}();

Network.findById = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {
    var res;
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            Network.validate('findById', [id]);
            _context7.next = 3;
            return Model.fetch(Network.endpoint + "/" + id, {
              expand: 4
            });

          case 3:
            res = _context7.sent;
            return _context7.abrupt("return", Network.fromArray(res)[0]);

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function (_x11) {
    return _ref4.apply(this, arguments);
  };
}();

Network.fetch = /*#__PURE__*/function () {
  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(name, params) {
    var data, res, i;
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (name === void 0) {
              name = '';
            }

            if (params === void 0) {
              params = {};
            }

            Network.validate('fetch', [name, params]);
            Object.assign(params, {
              expand: 4
            });

            if (name !== '') {
              Object.assign(params, {
                'this_name=': name
              });
            }

            _context8.next = 7;
            return Model.fetch(Network.endpoint, params);

          case 7:
            data = _context8.sent;
            res = Network.fromArray(data);
            i = 0;

          case 10:
            if (!(i < res.length)) {
              _context8.next = 16;
              break;
            }

            _context8.next = 13;
            return res[i].loadAllChildren();

          case 13:
            i++;
            _context8.next = 10;
            break;

          case 16:
            return _context8.abrupt("return", res);

          case 17:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function (_x12, _x13) {
    return _ref5.apply(this, arguments);
  };
}();

__decorate([Type(function () {
  return Device;
})], Network.prototype, "device", void 0);

var User = /*#__PURE__*/function (_Model) {
  _inheritsLoose(User, _Model);

  function User() {
    var _this;

    _this = _Model.call(this, 'user', '2.1') || this;
    _this.first_name = void 0;
    _this.last_name = void 0;
    _this.email = void 0;
    _this.phone = void 0;
    _this.name = void 0;
    _this.nickname = void 0;
    _this.language = void 0;
    _this.friend = void 0;
    _this.blocked = void 0;
    _this.provider = void 0;
    _this["public"] = void 0;
    _this.verified_email = void 0;
    return _this;
  }

  var _proto = User.prototype;

  _proto.create = /*#__PURE__*/function () {
    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              printError("User can't be created");

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function create() {
      return _create.apply(this, arguments);
    }

    return create;
  }();

  _proto.update = /*#__PURE__*/function () {
    var _update = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              printError("User can't be updated");

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function update() {
      return _update.apply(this, arguments);
    }

    return update;
  }();

  return User;
}(Model);
User.endpoint = '/2.1/user';
User.me = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
  var users;
  return _regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return User.fetch();

        case 2:
          users = _context3.sent;
          return _context3.abrupt("return", users[0]);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3);
}));
User.fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
  var data;
  return _regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return Model.fetch(User.endpoint + '/me', {
            expand: 1
          });

        case 2:
          data = _context4.sent;
          return _context4.abrupt("return", User.fromArray(data));

        case 4:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4);
}));

var Data = /*#__PURE__*/function (_Model) {
  _inheritsLoose(Data, _Model);

  function Data(id, type) {
    var _this;

    _this = _Model.call(this, 'data', '2.0') || this;
    _this.data_meta = {};
    _this.data = {};
    _this.data_meta.type = type;
    _this.data_meta.id = id;
    return _this;
  }

  var _proto = Data.prototype;

  _proto.url = function url() {
    return Data.endpoint;
  };

  _proto.attributes = function attributes() {
    return ['meta', 'data_meta'];
  };

  _proto.set = function set(name, item) {
    this.data[name] = item;
  };

  _proto.get = function get(name) {
    return this.data[name];
  };

  _proto.parse = function parse(json) {
    Model.validateMethod('Model', 'parse', arguments);

    if (isArray(json)) {
      json = json[0];
    }

    var oldModel = this.toJSON();
    Object.assign(this, pick(json, this.attributes()));
    Object.assign(this.data, omit(json, this.attributes()));
    var newModel = this.toJSON();
    return !isEqual(oldModel, newModel);
  };

  _proto.toJSON = function toJSON() {
    var obj = _Model.prototype.toJSON.call(this);

    return Object.assign(obj, this.data);
  };

  return Data;
}(Model);
Data.endpoint = '/2.0/data';

Data.findByDataId = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {
    var json, res;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return Model.fetch(Data.endpoint, {
              'this_data_meta.id': id,
              expand: 1
            });

          case 2:
            json = _context.sent;
            res = [];
            json.forEach(function (item) {
              var data = new Data();
              data.parse(item);
              res.push(data);
            });
            return _context.abrupt("return", res);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

function notify(_x) {
  return _notify.apply(this, arguments);
}

function _notify() {
  _notify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message) {
    var noti,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            Model.validateMethod('notification', 'notify', _args);
            noti = new SendNotification(message);
            _context.next = 4;
            return noti.create();

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _notify.apply(this, arguments);
}

var SendNotification = /*#__PURE__*/function (_PermissionModel) {
  _inheritsLoose(SendNotification, _PermissionModel);

  function SendNotification(message) {
    var _this;

    _this = _PermissionModel.call(this, 'notification', '2.1') || this;
    _this.custom = {
      message: ''
    };
    _this.custom.message = message;
    return _this;
  }

  var _proto = SendNotification.prototype;

  _proto.attributes = function attributes() {
    return ['custom'];
  };

  return SendNotification;
}(PermissionModel);
SendNotification.endpoint = '/2.1/notification';

var OAuth = /*#__PURE__*/function (_Model) {
  _inheritsLoose(OAuth, _Model);

  function OAuth(name) {
    var _this;

    _this = _Model.call(this, '2.0', 'oauth') || this;
    _this.name = void 0;
    _this.api = void 0;
    _this.installation = void 0;
    _this.token = void 0;
    _this.secret_token = void 0;
    _this.params = void 0;
    Model.validateMethod('OAuth', 'constructor', arguments);
    _this.name = name;
    return _this;
  }

  var _proto = OAuth.prototype;

  _proto.getToken = /*#__PURE__*/function () {
    var _getToken = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(handler) {
      var _this2 = this;

      var _args3 = arguments;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              OAuth.validate('getToken', _args3);
              return _context3.abrupt("return", new Promise( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve, reject) {
                  var _oauth$params, data, oauth, _oauth$data;

                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.prev = 0;
                          _context2.next = 3;
                          return Model.fetch("/2.0/oauth_connect/" + _this2.name, {}, true);

                        case 3:
                          data = _context2.sent;
                          oauth = data[0];

                          if (!(oauth != null && (_oauth$params = oauth.params) != null && _oauth$params.oauth_token)) {
                            _context2.next = 8;
                            break;
                          }

                          resolve(oauth.params);
                          return _context2.abrupt("return");

                        case 8:
                          printDebug('OAuth token is not valid, waiting for token on stream');
                          openStream.subscribeService('/oauth_connect', /*#__PURE__*/function () {
                            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {
                              var _event$data;

                              return _regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                  switch (_context.prev = _context.next) {
                                    case 0:
                                      if (!(((_event$data = event.data) == null ? void 0 : _event$data.name) === _this2.name)) {
                                        _context.next = 4;
                                        break;
                                      }

                                      printDebug('Got OAuth token from stream');
                                      resolve(event.data.params);
                                      return _context.abrupt("return", true);

                                    case 4:
                                      return _context.abrupt("return");

                                    case 5:
                                    case "end":
                                      return _context.stop();
                                  }
                                }
                              }, _callee);
                            }));

                            return function (_x4) {
                              return _ref2.apply(this, arguments);
                            };
                          }());

                          if (handler) {
                            handler(oauth == null ? void 0 : (_oauth$data = oauth.data) == null ? void 0 : _oauth$data.request);
                          }

                          _context2.next = 16;
                          break;

                        case 13:
                          _context2.prev = 13;
                          _context2.t0 = _context2["catch"](0);
                          reject(_context2.t0);

                        case 16:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, null, [[0, 13]]);
                }));

                return function (_x2, _x3) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function getToken(_x) {
      return _getToken.apply(this, arguments);
    }

    return getToken;
  }();

  OAuth.validate = function validate(name, params) {
    Model.validateMethod('OAuth', name, params);
  };

  return OAuth;
}(Model);
OAuth.endpoint = '/2.0/oauth_connect';

OAuth.getToken = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name, handler) {
    var oauth;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            OAuth.validate('staticGetToken', [name, handler]);
            oauth = new OAuth(name);
            _context4.next = 4;
            return oauth.getToken(handler);

          case 4:
            return _context4.abrupt("return", _context4.sent);

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

var storages = {};
function wappStorage(_x) {
  return _wappStorage.apply(this, arguments);
}

function _wappStorage() {
  _wappStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name) {
    var storage,
        _args5 = arguments;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            Model.validateMethod('WappStorage', 'wappStorage', _args5);

            if (name === undefined) {
              name = 'default';
            }

            if (!(storages[name] === undefined)) {
              _context5.next = 7;
              break;
            }

            storage = new WappStorage(name);
            _context5.next = 6;
            return storage.init();

          case 6:
            storages[name] = storage;

          case 7:
            return _context5.abrupt("return", storages[name]);

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _wappStorage.apply(this, arguments);
}

var WappStorage = /*#__PURE__*/function () {
  function WappStorage(name) {
    this.name = '';
    this.id = '';
    this.data = void 0;
    WappStorage.validate('constructor', arguments);
    this.name = name;
    this.id = "wapp_storage_" + this.name;
    this.data = new Data(this.id, 'wapp_storage');
  }

  var _proto = WappStorage.prototype;

  _proto.init = /*#__PURE__*/function () {
    var _init = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var data;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Data.findByDataId(this.id);

            case 2:
              data = _context.sent;

              if (!(data.length > 0)) {
                _context.next = 7;
                break;
              }

              this.data = data[0];
              _context.next = 9;
              break;

            case 7:
              _context.next = 9;
              return this.data.create();

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function init() {
      return _init.apply(this, arguments);
    }

    return init;
  }();

  _proto.set = /*#__PURE__*/function () {
    var _set = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, item) {
      var _args2 = arguments;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              WappStorage.validate('set', _args2);
              this.data.set(name, item);
              _context2.next = 4;
              return this.data.update();

            case 4:
              openStream.sendInternal("storage_" + this.name + "_updated");

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function set(_x2, _x3) {
      return _set.apply(this, arguments);
    }

    return set;
  }();

  _proto.get = function get(name) {
    WappStorage.validate('get', arguments);
    return this.data.get(name);
  };

  _proto.onChange = function onChange(cb) {
    var _this = this;

    WappStorage.validate('onChange', arguments);
    openStream.subscribeInternal("storage_" + this.name + "_updated",
    /*#__PURE__*/

    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _this.data.reload();

              case 2:
                cb();
                return _context3.abrupt("return", undefined);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x4) {
        return _ref.apply(this, arguments);
      };
    }());
  };

  _proto.reload = /*#__PURE__*/function () {
    var _reload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.data.reload();

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function reload() {
      return _reload.apply(this, arguments);
    }

    return reload;
  }();

  _proto.reset = function reset() {
    this.data["delete"]();
    this.data = new Data(this.id, 'wapp_storage');
    this.data.create();
  };

  WappStorage.validate = function validate(name, params) {
    Model.validateMethod('WappStorage', name, params);
  };

  return WappStorage;
}();

Error.stackTraceLimit = 30;

export { Data, Device, Network, Notification, OAuth, State, Stream, User, Value, ValueTemplate, cancelFromBackground, cancelFromForeground, cancelOnWebHook, config, createNetwork, extSyncToken, fromBackground, fromForeground, notify, onWebHook, wappsto as request, sendToBackground, sendToForeground, startLogging, stopLogging, wappStorage };
//# sourceMappingURL=wappsto-wapp.esm.js.map
